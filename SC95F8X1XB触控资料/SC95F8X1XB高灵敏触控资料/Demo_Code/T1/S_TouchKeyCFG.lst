C51 COMPILER V9.60.0.0   S_TOUCHKEYCFG                                                     12/14/2022 15:21:14 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE S_TOUCHKEYCFG
OBJECT MODULE PLACED IN S_TouchKeyCFG.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE lib\S_TouchKeyCFG.C OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -S_TouchKeyCFG.lst) OBJECT(S_TouchKeyCFG.obj)

line level    source

   1          //*************************************************************************************************
   2          //  Copyright (c)       ÉîÛÚÊÐÈüÔªÎ¢µç×ÓÓÐÏÞ¹«Ë¾
   3          //      ÎÄ¼þÃû³Æ        :  S_TouchKeyCFG.c
   4          //      ×÷Õß            : 
   5          //      Ä£¿é¹¦ÄÜ        :  
   6          //      °æ±¾            :
   7          //      ¸ü¸Ä¼ÇÂ¼        :
   8          //      ×¢ÒâÊÂÏî        :  ÓÃ»§ÐèÒªÅäÖÃµÄÎÄ¼þÔÚS_TouchKeyCFG.hÖÐ
   9          //  ¿â°æ±¾±ê¼Ç  : 
  10          //************************************************************************************************
  11          #include "lib\S_TouchKeyCFG.h"
  12          
  13          //*************************************************************************************
  14          //              844 ¼Ä´æÆ÷¶¨Òå
  15          //*************************************************************************************
  16          /*PSW*/
  17          sfr     TK_PSW      =   0xD0;   //³ÌÐò×´Ì¬×Ö
  18          sbit    TK_CY           =       TK_PSW^7;       //½øÎ»  
  19          
  20          //===========================================================================
  21          //È«¾Ö±äÁ¿¶¨Òå
  22          unsigned        char    xdata           SOCAPI_TouchKeyStatus;                                  //API½Ó¿Ú×´Ì¬£ºbit7-Ò»ÂÖÉ¨ÃèÍê³É±êÖ¾  1:Íê³É    0£ºÎ´Íê³É
  23                                                                                                                                                      //                     bit6-Í¨µÀ´¥Ãþ¼ÆÊýÒç³ö±êÖ¾ 1:Òç³ö      0:Î´Òç³ö
  24          //===============================================================================
  25          //È«¾Ö±äÁ¿ÉùÃ÷£º¸ÃÇøÓò²»¿ÉÐÞ¸Ä
  26          unsigned        int     xdata           RawData [SOCAPI_SET_TOUCHKEY_TOTAL];                    
  27          unsigned        int             xdata           BaseLine[SOCAPI_SET_TOUCHKEY_TOTAL];
  28          unsigned    int         xdata           FilterData[SOCAPI_SET_TOUCHKEY_TOTAL];                                                                                          
  29          unsigned        char    xdata           RestAreaCnt[SOCAPI_SET_TOUCHKEY_TOTAL];                         
  30          unsigned        char    xdata           TouchCnt[SOCAPI_SET_TOUCHKEY_TOTAL];                            
  31          unsigned        char    xdata           NoTouchCnt[SOCAPI_SET_TOUCHKEY_TOTAL];                          
  32          unsigned        char    xdata           CurrentChannel[SOCAPI_SET_TOUCHKEY_TOTAL];                                                   
  33          unsigned    char    xdata           LowFingerDataCnt[SOCAPI_SET_TOUCHKEY_TOTAL];
  34          unsigned        char    xdata           FloatAreaCnt[SOCAPI_SET_TOUCHKEY_TOTAL]; 
  35          unsigned        char    xdata       BaseLineAdjusttmp[SOCAPI_SET_TOUCHKEY_TOTAL];       
  36          int                 xdata           DifferAccum[SOCAPI_SET_TOUCHKEY_TOTAL]; 
  37          char                xdata               SetNoiseThreshold;
  38          unsigned        char    xdata           ConfirmTouchCnt;
  39          unsigned        char    xdata           MultipleDealTpye = 0; 
  40          
  41          //×Ô¶¨Òå±äÁ¿
  42          unsigned        int     xdata       UpdateBaseLNum;                                             // µ¥¼ü³¤°´¼ÆÊýÆ÷
  43          unsigned        int     xdata       MultipleLNum;                                               // ¶à°´¼ü¸ÉÈÅ¼ÆÊý
  44          
  45          //Íâ²¿±äÁ¿½Ó¿Ú
  46          extern  unsigned        char    data            CurrentChannelMax;              //µ±Ç°Ñ¡ÖÐµÄkeysensorµÄ¸öÊý
  47          extern  bit  bMultiple; //¶à°´¼ü±êÖ¾    
  48          extern  bit  GetIsNeedUpdateBaseline(void);
  49          extern  void SetNeedUpdateBaseline(void);
  50          extern  unsigned long int SensorKeyFlag(void);
  51          extern  void MultipleDeal(unsigned char CycleCnt);
  52          extern  void TouchKey_Service(void);
  53          
  54          /*******************************¿âº¯Êý»ù´¡ÉèÖÃ£¬Ò»°ã²»ÐèÒª¸ü¸Ä***************************************/
C51 COMPILER V9.60.0.0   S_TOUCHKEYCFG                                                     12/14/2022 15:21:14 PAGE 2   

  55          #define         SOCAPI_CFG_CYCLE_CNT                                        32          //È¡Öµ·¶Î§10-255£¬´¥¿Ø³õÊ¼»¯Êý¾ÝÂË³ö´ÎÊý£¬ÒÔ¼°ÐÞÕýÖµ³õÊ¼»¯ÐÞÕý´
             -ÎÊý£¬Ä¬ÈÏ32£¬È¡ÖµÔ½´ó´¥¿Ø³õÊ¼»¯Ê±¼äÔ½³¤£¬´¥¿ØÊý¾ÝÔ½ÎÈ¶¨  
  56          #define         SOCAPI_CFG_OVERLOW_MAX_COUNT                        10          //µÍ»ùÏß¸üÐÂËÙ¶ÈÉèÖÃ£¬´ú±í·¢ÉúµÍ»ùÏßºó£¬¶àÉÙÂÖ¸üÐÂÒ»´Î»ùÏß
             -£¬¸üÐÂ²½½ønoise/2£¬ÖµÔ½Ð¡»ùÏß¸üÐÂËÙ¶ÈÔ½¿ì
  57          #define         SOCAPI_CFG_RESET_BASELINE_CNT                       10          //µÍ»ùÏß¸üÐÂ¶àÉÙ´Îºó£¬Èç¹û»¹´¦ÓÚµÍ»ùÏß×´Ì¬£¬Ö±½ÓÇ¿ÖÆ¸üÐÂ
             -»ùÏß£¬ÖµÔ½Ð¡»ùÏß¸üÐÂËÙ¶ÈÔ½¿ì
  58                                                                                                                                          //SOCAPI_CFG_OVERLOW_MAX_COUNTºÍSOCAPI_CFG_RESET_BASELINE_CNTµÄÈ¡Öµ³Ë»ý²»ÄÜ´óÓÚ255
  59          /***************************************************************************************/
  60          
  61          /***************µ¯»É¿â¶ÀÓÐ***************/
  62          #define         SOCAPI_SET_CS_FUNCTION                                          1               //0:±íÊ¾²»½øÐÐCS²âÊÔ,1: ±íÊ¾½øÐÐCS²âÊÔ,Ä¬ÈÏ0
  63          #define         SOCAPI_INHIBITION_ZONE                                      8           //ÒÖÖÆÇø¼ä%£¬ÉèÖÃ·¶Î§5-10£¬Ä¬ÈÏ7,¼´£¨7*10£©%=70% £¬Á¬Ë®Ê±¼Ó´ó¸Ã
             -²ÎÊý,¶Ô½²»úÉèÖÃÐ¡
  64          #define         SOCAPI_MAX_KEY_MUTIPLE                                          300             //¶àÉÙ´Î¸ÉÈÅ¸üÐÂ»ùÏß£¬Ä¬ÈÏ300*5=1500
  65          #define         SOCAPI_MAX_KEY_NUM_INVALID                                      3               //Ç¿ÖÆ¸üÐÂ»ùÏß°´¼üÏÞÖÆ¸öÊý£¬Ä¬ÈÏ3
  66          /****************************************/
  67          
  68          #define         AppType                                         0
  69          #define         IsDoubleKey                                             1
  70          #define         AirSeparationDistance               2
  71          #define         CONFIRMTOUCHCNT                 3
  72          #define         INIT_AUTO_UPDATE_TIME               4
  73          #define         SET_KEY_CONTI_TIME              5  
  74          #define         SET_SYNC_UPDATE                                 6
  75          #define         SET_UPDATE_SPEED                                7       
  76          #define         AUTO_UPDATE_TIME                    8
  77          #define         FilteredKValue                                  9
  78          #define         SET_ANTIJAM                                     10
  79          #define         BAUD                                    11
  80          #define         DwellTime                                       12
  81          #define         SaveTime                                            13
  82          #define         NOISE                           16
  83          
  84          #define         SET_TOUCH_FREQ                                  0
  85          #define         SET_RESOLUTION                                  1
  86          #define         SET_GAIN_CFG                                    2
  87          #define         SCANTIME                                                3
  88          #define         SET_ICHA                                                4
  89          #define         FINGER_THRESHOLD_H                          6
  90          #define         FINGER_THRESHOLD_L                          7
  91          
  92          //**********************************************************************************    
  93          //                                                              ºê¶¨Òå½Ó¿Úµ÷ÓÃ²¿·Ö                                                                //
  94          //**********************************************************************************
  95          unsigned        char    code        CFG_OVERLOW_MAX_COUNT = SOCAPI_CFG_OVERLOW_MAX_COUNT;
  96          unsigned        char    code        CFG_RESET_BASELINE_CNT = SOCAPI_CFG_RESET_BASELINE_CNT;     
  97          unsigned        char    code        CFG_CYCLE_CNT = SOCAPI_CFG_CYCLE_CNT;
  98          
  99          //**********************************************************************************    
 100          //                                                              º¯Êý½Ó¿Úµ÷ÓÃ²¿·Ö                                                                  //
 101          //**********************************************************************************
 102          /**************************************************
 103          *º¯ÊýÃû³Æ£ºunsigned int SetOneKeyPushResetTime(void) 
 104          *º¯Êý¹¦ÄÜ£º°´¼ü×î³¤µÄÊä³öÊ±¼ä
 105          *Èë¿Ú²ÎÊý£ºvoid
 106          *³ö¿Ú²ÎÊý£ºunsigned int SOCAPI_SET_KEY_CONTI_TIME
 107          *±¸×¢    £ºÕâ¸ö·µ»ØÖµµÄÉèÖÃ£¬ ÊÇ¸ù¾ÝÓÐ¶à³¤Ê±¼äÆô¶¯TouchKeyRestart£¨£©Ò»´Î
 108          ÀýÈç10ms Æô¶¯Ò»´Î£¬ ÄÇSOCAPI_SET_KEY_CONTI_TIME*10ms£¬³¬¹ýÊ±¼äºó´Ë°´¼üÎÞÐ§¡£
 109          **************************************************/
 110          unsigned int SetOneKeyPushResetTime(void)   
 111          {         
 112   1              return  TKCFG[SET_KEY_CONTI_TIME];
C51 COMPILER V9.60.0.0   S_TOUCHKEYCFG                                                     12/14/2022 15:21:14 PAGE 3   

 113   1      }
 114          /**************************************************
 115          *º¯ÊýÃû³Æ£ºunsignedint  GetBaselineUpdateThreshold(void)
 116          *º¯Êý¹¦ÄÜ£º¸üÐÂËÙ¶È 
 117          *Èë¿Ú²ÎÊý£ºvoid
 118          *³ö¿Ú²ÎÊý£ºunsigned  int 
 119          *±¸×¢    £º
 120          **************************************************/
 121          unsigned int  GetBaselineUpdateThreshold(void)
 122          {
 123   1              return TKCFG[SET_UPDATE_SPEED]; 
 124   1      }
 125          
 126          /**************************************************
 127          *º¯ÊýÃû³Æ£ºunsigned char GetInitAutoUpdateTime(void)
 128          *º¯Êý¹¦ÄÜ£º³õÊ¼»¯×Ô¶¯Ð£×¼´ÎÊý
 129          *Èë¿Ú²ÎÊý£ºvoid
 130          *³ö¿Ú²ÎÊý£ºunsigned  char 
 131          *±¸×¢    £º
 132          **************************************************/
 133          unsigned char GetInitAutoUpdateTime(void)
 134          {
 135   1              return  TKCFG[INIT_AUTO_UPDATE_TIME];
 136   1      }
 137          /**************************************************
 138          *º¯ÊýÃû³Æ£ºunsigned char GetCsFunction(void)
 139          *º¯Êý¹¦ÄÜ£º½øÐÐCS ²âÊÔ
 140          *Èë¿Ú²ÎÊý£ºvoid
 141          *³ö¿Ú²ÎÊý£ºchar SOCAPI_SET_CS_FUNCTION
 142          *±¸×¢    £º
 143          **************************************************/
 144          unsigned char GetCsFunction(void)
 145          {
 146   1              return SOCAPI_SET_CS_FUNCTION; 
 147   1      }
 148          /**************************************************
 149          *º¯ÊýÃû³Æ£ºint  GetCurrFingerValue(unsigned char i)
 150          *º¯Êý¹¦ÄÜ£º»ñÈ¡µ±Ç°µÄfinger Öµ
 151          *Èë¿Ú²ÎÊý£ºunsigned char
 152          *³ö¿Ú²ÎÊý£ºint 
 153          *±¸×¢    £º
 154          **************************************************/
 155          unsigned int   GetCurrFingerValue(unsigned char i)
 156          { 
 157   1              return  TKChannelCfg[i][FINGER_THRESHOLD_H]*256+TKChannelCfg[i][FINGER_THRESHOLD_L] ;
 158   1      }
 159          
 160          /**************************************************
 161          *º¯ÊýÃû³Æ£ºunsigned char  GetScanTimeValue(unsigned char i)
 162          *º¯Êý¹¦ÄÜ£º»ñÈ¡µ±Ç°Í¨µÀµÄÉ¨ÃèÊ±¼ä
 163          *Èë¿Ú²ÎÊý£ºunsigned char
 164          *³ö¿Ú²ÎÊý£ºunsigned char 
 165          *±¸×¢    £º
 166          **************************************************/
 167          unsigned char  GetScanTimeValue(unsigned char i)
 168          { 
 169   1              return TKChannelCfg[i][SCANTIME];
 170   1      }
 171          /**************************************************
 172          *º¯ÊýÃû³Æ£ºunsigned char IsDoubleKeyOrSlideKey(void)
 173          *º¯Êý¹¦ÄÜ£º¼ì²âÊÇ·ñÊÇµ¯»É»¬Ìõ»òÕßË«¼ü
 174          *Èë¿Ú²ÎÊý£ºvoid
C51 COMPILER V9.60.0.0   S_TOUCHKEYCFG                                                     12/14/2022 15:21:14 PAGE 4   

 175          *³ö¿Ú²ÎÊý£ºunsigned char 
 176          *±¸×¢    £º
 177          **************************************************/
 178          unsigned char IsDoubleKeyOrSlideKey(void)
 179          {
 180   1          return TKCFG[IsDoubleKey];
 181   1      }
 182          /**************************************************
 183          *º¯ÊýÃû³Æ£ºunsigned char  GetBaseLineAdjustValue(unsigned char i)
 184          *º¯Êý¹¦ÄÜ£º»ñÈ¡µ±Ç°Í¨µÀµÄ»ùÏßµ÷Õû
 185          j
 186          *Èë¿Ú²ÎÊý£ºunsigned char
 187          *³ö¿Ú²ÎÊý£ºunsigned char 
 188          *±¸×¢    £º
 189          **************************************************/
 190          unsigned char  GetBaseLineAdjustValue(unsigned char i)
 191          {       
 192   1           return BaseLineAdjusttmp[i]; 
 193   1      }
 194          /**************************************************
 195          *º¯ÊýÃû³Æ£ºunsigned char GetUpConfirmCnt(void)
 196          *º¯Êý¹¦ÄÜ£º¼ì²â°´¼üµ¯Æð´ÎÊý
 197          *Èë¿Ú²ÎÊý£ºvoid
 198          *³ö¿Ú²ÎÊý£º·µ»Ø°´¼üµ¯ÆðÈ·ÈÏ´ÎÊý 
 199          *±¸×¢    £º
 200          **************************************************/
 201          unsigned char GetUpConfirmCnt(void)
 202          {
 203   1              return ConfirmTouchCnt>>1;
 204   1      }
 205          /**************************************************
 206          *º¯ÊýÃû³Æ£ºunsigned char GetTKYzCnt(void)
 207          *º¯Êý¹¦ÄÜ£º»ñÈ¡°´¼üÒÖÖÆÈ·ÈÏ´ÎÊý
 208          *Èë¿Ú²ÎÊý£ºvoid
 209          *³ö¿Ú²ÎÊý£º·µ»ØÒÖÖÆ´ÎÊý 
 210          *±¸×¢    £º
 211          **************************************************/
 212          
 213          unsigned char GetTKYzCnt(void)
 214          {
 215   1              return (ConfirmTouchCnt/3);
 216   1      }
 217          
 218          /**************************************************
 219          *º¯ÊýÃû³Æ£ºint GetTKYzThreshold(unsigned char i)
 220          *º¯Êý¹¦ÄÜ£º»ñÈ¡°´¼üÒÖÖÆÇø¼ä
 221          *Èë¿Ú²ÎÊý£ºunsigned char i
 222          *³ö¿Ú²ÎÊý£º·µ»ØÒÖÖÆÇø¼ä
 223          *±¸×¢    £º
 224          **************************************************/
 225          unsigned int GetTKYzThreshold(unsigned char i)
 226          {       
 227   1              unsigned int SetFingerThresholdtmp; 
 228   1              
 229   1              SetFingerThresholdtmp = GetCurrFingerValue(i); 
 230   1          SetFingerThresholdtmp = SetFingerThresholdtmp*SOCAPI_INHIBITION_ZONE/10;
 231   1      
 232   1              return SetFingerThresholdtmp;
 233   1      }
 234          /**************************************************
 235          *º¯ÊýÃû³Æ£ºvoid CurrentSensorChoose(void)
 236          *º¯Êý¹¦ÄÜ£ºµ±Ç°Í¨µÀÑ¡Ôñ
C51 COMPILER V9.60.0.0   S_TOUCHKEYCFG                                                     12/14/2022 15:21:14 PAGE 5   

 237          *Èë¿Ú²ÎÊý£ºvoid
 238          *³ö¿Ú²ÎÊý£ºvoid
 239          *±¸×¢    £º
 240          **************************************************/
 241          void CurrentSensorChoose(void)
 242          {
 243   1              unsigned char  data     i = 0;
 244   1              unsigned char  data     Ctk_Channel_mark = 0;
 245   1              unsigned long int  data  CurrentSensorKey ;              
 246   1              
 247   1              CurrentSensorKey = SOCAPI_SET_TOUCHKEY_CHANNEL; 
 248   1                      
 249   1              for(i=0;i<31;i++)
 250   1              {
 251   2                      CurrentSensorKey=CurrentSensorKey>>1;
 252   2                      if(TK_CY)
 253   2                      {
 254   3                              CurrentChannel[Ctk_Channel_mark] = i;                                           //Ñ¡Ôñ´¥Ãþµ±Ç°µÄÍ¨µÀ
 255   3                              Ctk_Channel_mark++;
 256   3                              if(Ctk_Channel_mark >= SOCAPI_SET_TOUCHKEY_TOTAL)
 257   3                                      break;
 258   3                      }               
 259   2              }
 260   1              CurrentChannelMax = Ctk_Channel_mark;                                                   //µ±Ç°Ñ¡ÔñµÄ°´¼üÊý 
 261   1      }
 262          
 263          /**************************************************
 264          *º¯ÊýÃû³Æ£ºunsigned char  GetCfgMsg(unsigned char i)
 265          *º¯Êý¹¦ÄÜ£º»ñÈ¡Touch KEY ÅäÖÃÐÅÏ¢
 266          *Èë¿Ú²ÎÊý£ºvoid
 267          *³ö¿Ú²ÎÊý£ºint 
 268          *±¸×¢    £º
 269          **************************************************/
 270          unsigned char  GetCfgMsg(unsigned char i)
 271          {
 272   1              switch(i)
 273   1              { 
 274   2                       case 0:  return TKChannelCfg[0][SET_TOUCH_FREQ];
 275   2                       case 1:  return TKChannelCfg[0][SET_RESOLUTION];
 276   2                       case 2:  return TKChannelCfg[0][SET_GAIN_CFG];
 277   2                       case 3:  return GetBaseLineAdjustValue(0);//TKChannelCfg[0][SET_GAIN_CFG];
 278   2                       case 4:  return TKCFG[SET_ANTIJAM];
 279   2                       default:return 0;              
 280   2              }
 281   1      }
 282          
 283          /**************************************************
 284          *º¯ÊýÃû³Æ£ºvoid CurrentSensorChoose(void)
 285          *º¯Êý¹¦ÄÜ£º³õÊ¼»¯TK¼Ä´æÆ÷
 286          *Èë¿Ú²ÎÊý£ºvoid
 287          *³ö¿Ú²ÎÊý£ºvoid
 288          *±¸×¢    £º
 289          **************************************************/
 290          void TouchKeyCFGInit(void)
 291          {
 292   1              unsigned char  data     i;
 293   1              ConfirmTouchCnt = TKCFG[CONFIRMTOUCHCNT];
 294   1              SetNoiseThreshold = TKCFG[NOISE];
 295   1              CurrentSensorChoose(); 
 296   1               for(i=0;i<CurrentChannelMax;i++)
 297   1              {
 298   2                BaseLineAdjusttmp[i] =TKChannelCfg[i][SET_ICHA];;     
C51 COMPILER V9.60.0.0   S_TOUCHKEYCFG                                                     12/14/2022 15:21:14 PAGE 6   

 299   2              } 
 300   1              UpdateBaseLNum = 0; 
 301   1      }
 302          
 303          /**************************************************
 304          *º¯ÊýÃû³Æ£ºunsigned int TouchKeyScan(void)
 305          *º¯Êý¹¦ÄÜ£º¼ì²â°´¼ü½Ó¿Ú
 306          *Èë¿Ú²ÎÊý£ºvoid
 307          *³ö¿Ú²ÎÊý£º°´¼üÍ¨µÀ£¬ ·µ»ØµÄÊÇÒ»¸öint , Í¨µÀÊý
 308          *±¸×¢    £º1,  µ÷ÓÃ´¥¿Ø¿â¼ì²âº¯ÊýSensorKeyFlag()
 309                             2,  ·ÖÎöµÃ³ö16¸öÍ¨µÀ£¬ÄÄ¸öÍ¨µÀÓÐ°´ÏÂ£¬°´ÏÂbit Î»ÉèÖÃÎª1£¬·ñÔòÎª0
 310                             3,  ¼ì²âÊÇ·ñÐèÒªÁ¢¼´¸üÐÂbaseline:  ´óÓÚMAX_KEY_RESET_BASELINE ¸ö°´¼ü°´ÏÂÊ±Á¢¼´¸üÐÂbaseline
 311                             4,  Ë«¼ü»òÕßµ¥¼ü°´ÏÂÊ±£¬ Ê±¼ä´óÓÚSetOneKeyPushResetTime()½á¹ûÊ±¸üÐÂbaseline 
 312          **************************************************/
 313          unsigned long int TouchKeyScan(void)
 314          {
 315   1              unsigned char data t;
 316   1          unsigned char data MultipleCnt = 0;//°´¼ü¼ÆÊý
 317   1              unsigned long int data Keyvalue ; 
 318   1              unsigned long int data KeyData = 0;     
 319   1              
 320   1              if(GetIsNeedUpdateBaseline() == 0)                              //¼ì²âÊÇ·ñÐèÒª¸üÐÂbaseline 
 321   1              {
 322   2                      Keyvalue = SensorKeyFlag();                                     //SensorÅÐ¶Ï, ÕâÀïÈç¹ûbMultiple = 1 ±íÊ¾ÖÐ¼äÓÐ¸ÉÈÅ       //·ÖÎö°´¼ü£¬µÃ³ö±ê×¼
             -µÄ16Í¨µÀbit Î»                                                                           
 323   2                      for(t=0;t<CurrentChannelMax;t++)
 324   2                      {
 325   3                              Keyvalue = Keyvalue>>1;
 326   3                              if(TK_CY)
 327   3                              {
 328   4                                      KeyData |= ((unsigned long int)0x01 << (CurrentChannel[t]));              
 329   4                                      MultipleCnt++;                                                  
 330   4                              }
 331   3                      }                
 332   2                      if(MultipleCnt >= 2)                                                                            //½øÈë¶à°´¼ü´¦Àí
 333   2                      {                       
 334   3                              bMultiple = 1;                  
 335   3                              if(MultipleCnt >= SOCAPI_MAX_KEY_NUM_INVALID)
 336   3                              {
 337   4                                      SetNeedUpdateBaseline();                                                        // Á¢¼´¸üÐÂbaseline ,ÀýÈçÑÇ¿ËÁ¦°å¸ÇÉÏÈ¥
 338   4                              }
 339   3                              else
 340   3                              {                                       
 341   4                                      if(IsDoubleKeyOrSlideKey())
 342   4                                      {
 343   5                                              bMultiple = 0;
 344   5                                      }                                
 345   4                              }                       
 346   3                      }                       
 347   2      
 348   2                      if(bMultiple == 0)                                                      //½øÈë°´¼üÅÐ¶Ï
 349   2                      {               
 350   3                              if(KeyData != 0x0)                                          //µ¥¸ö°´¼ü´ïµ½¶à³¤Ê±¼ä¾Íupdate baseline ,ËÉÊÖ¼ì²â
 351   3                              {                       
 352   4                                      UpdateBaseLNum++; 
 353   4                              }
 354   3                              else    
 355   3                              {
 356   4                                      UpdateBaseLNum = 0;     
 357   4                              } 
 358   3                      }       
 359   2                      else
C51 COMPILER V9.60.0.0   S_TOUCHKEYCFG                                                     12/14/2022 15:21:14 PAGE 7   

 360   2                      {   
 361   3                          //¿¼ÂÇ»ùÏß¸üÐÂ              
 362   3                              MultipleLNum++; 
 363   3                              KeyData = 0x00;
 364   3                      }
 365   2      
 366   2                      if(UpdateBaseLNum > SetOneKeyPushResetTime())     //°´¼ü³¬³ö×î³¤Êä³öÊ±¼ä¸üÐÂ»ùÏß
 367   2                      {
 368   3                              SetNeedUpdateBaseline(); 
 369   3                              UpdateBaseLNum = 0;
 370   3                      }
 371   2                                      
 372   2                      if(MultipleLNum >SOCAPI_MAX_KEY_MUTIPLE)                  //¸ÉÈÅ¼ÆÊý´óÓÚ×î´ó¼ÆÊý¸üÐÂ»ùÏß
 373   2                      {
 374   3                              SetNeedUpdateBaseline(); 
 375   3                              MultipleDealTpye = 1; 
 376   3                              MultipleLNum = 0;
 377   3                      }  
 378   2              }                       
 379   1              else
 380   1              {
 381   2                      MultipleDeal(TKCFG[AUTO_UPDATE_TIME]);                                                                          //»ùÏß¸´Î»´¦Àí
 382   2              }  
 383   1              
 384   1              return KeyData;
 385   1      }
 386          
 387          /**************************************************
 388          *º¯ÊýÃû³Æ£ºvoid CTK_ISR(void) interrupt 11
 389          *º¯Êý¹¦ÄÜ£º´¥ÃþÖÐ¶Ï·þÎñº¯Êý
 390          *Èë¿Ú²ÎÊý£ºvoid
 391          *³ö¿Ú²ÎÊý£ºvoid
 392          *±¸×¢    £º
 393          **************************************************/
 394          void CTK_ISR(void) interrupt    11
 395          {
 396   1         TouchKey_Service();
 397   1      }
 398          
 399          
 400          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    706    ----
   CONSTANT SIZE    =     69    ----
   XDATA SIZE       =     68    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
