C51 COMPILER V9.59.0.0   BSP_EEPROM                                                        04/08/2024 14:09:42 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE BSP_EEPROM
OBJECT MODULE PLACED IN ..\Output\bsp_eeprom.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\Apps\bsp_eeprom.c LARGE OMF2 OPTIMIZE(0,SIZE) BROWSE INTVECTOR(0X1000
                    -) INCDIR(..\FWLib\SC95F_Lib\inc;..\User;..\IOT_DRIVER\XIAOMI;..\Drivers;..\Drivers\TKDriver\C;..\List\..\Apps;..\Apps) D
                    -EFINE(SC95F8x1xB) DEBUG PRINT(..\List\bsp_eeprom.lst) TABS(2) OBJECT(..\Output\bsp_eeprom.obj)

line level    source

   1          
   2          
   3          #include <string.h>
   4          #include "bsp_eeprom.h"
   5          #include "globe.h"
   6          
   7          #define _INIT_DADA 0x5b
   8          #define  EEPROM0_ADDR 0ul
   9          #define  EEPROM1_ADDR 0x200UL
  10          #define  EEPROM2_ADDR 0x400UL
  11          #define  EEPROM3_ADDR 0x600UL
  12          #define EEPROM_SIZE 0XFFFF
  13          
  14          
  15          #define WriteToEEprom(X)          WriteEEpromData(EEPROM##X##_ADDR,(u8 *)gstAM901.stFilter,sizeof(ST_Filter))
             - 
  16          #define ReadFromEEprom(X)         IAP_ReadByteArray(EEPROM##X##_ADDR,(u8 *)gstAM901.stFilter,sizeof(ST_Filter
             -),IAP_MEMTYPE_EEPROM)
  17          #define EraseEEprom(X)            IAP_EEPROMSectorEraseOption(EEPROM##X##_ADDR)
  18          
  19          #define EEPROM_DATA_LEN 4
  20          #define Block_Size 0XFFff
  21          /**************************************************
  22          *函数名称:void IAP_SectorEraseOption(Address,Data,IAP_MemType)
  23          *函数功能:IAP扇区擦除
  24          *入口参数:uint32_t:Address:IAP操作地址
  25          *         IAP_MemType_TypeDef:IAP_MemType:IAP操作对象
  26          *出口参数:void
  27          **************************************************/
  28          
  29          //u8 testAyy[]={0x60,0x33,0x99,0x90,0x90,0x90,0xD5,0xFA};
  30          
  31          //static u8 FromEeppAry[8];
  32          
  33          
  34          u8 WriteEEpromData(u32 x,u8 *p,u8 len)
  35          {
  36   1        u8 i ,FromEepromData;
  37   1        u8 *pData = p;
  38   1        u32 addr =x;
  39   1        
  40   1        
  41   1        for(i= 0;i < len; i++)
  42   1        { 
  43   2          IAP_EEPROMProgramByteOption(addr+i,pData[i]);
  44   2          FromEepromData =IAP_ReadByte(addr+i,IAP_MEMTYPE_EEPROM);
  45   2          if(FromEepromData != pData[i] )
  46   2            return 0;
  47   2        }
  48   1        return 1;
  49   1      }
  50          
  51          
C51 COMPILER V9.59.0.0   BSP_EEPROM                                                        04/08/2024 14:09:42 PAGE 2   

  52          
  53          
  54          void WriteTempEeprom(u8 blolk)
  55          {
  56   1        if(blolk ==0)
  57   1        {
  58   2          if(!gstAM901.Run.Bit.EepromBlok )
  59   2          {
  60   3              //gstAM901.stFilter->type++;
  61   3              if(WriteToEEprom(0) == 0)
  62   3              {
  63   4                  if(WriteToEEprom(0) == 0)
  64   4                  {
  65   5                      if(WriteToEEprom(0) == 0)
  66   5                      {
  67   6                          WriteToEEprom(0);
  68   6                      }
  69   5                  }
  70   4              }
  71   3          }
  72   2        }
  73   1      
  74   1        else if(blolk ==1)
  75   1        {
  76   2          if(!gstAM901.Run.Bit.EepromBlok )
  77   2          {
  78   3              gstAM901.stFilter->type++;
  79   3              if(WriteToEEprom(1) == 0)
  80   3              {
  81   4                  if(WriteToEEprom(1) == 0)
  82   4                  {
  83   5                      if(WriteToEEprom(1) == 0)
  84   5                      {
  85   6                          WriteToEEprom(1);
  86   6                      }
  87   5      
  88   5                  }
  89   4              }
  90   3          }
  91   2        }
  92   1        else
  93   1        {
  94   2            gstAM901.stFilter->type  = 0;
  95   2            WriteToEEprom(1);
  96   2        }
  97   1          
  98   1      }
  99          
 100          
 101          void  ReadEEprom(u8 x)
 102          {
 103   1        u8 len;
 104   1        u8 cnt =0;
 105   1      loop:
 106   1        if(x == 0)
 107   1         len = ReadFromEEprom(0);
 108   1        else if(x == 1)
 109   1         len = ReadFromEEprom(1);
 110   1        
 111   1        if(len != sizeof(ST_Filter) && cnt++ >3)
 112   1          goto loop;
 113   1      }
C51 COMPILER V9.59.0.0   BSP_EEPROM                                                        04/08/2024 14:09:42 PAGE 3   

 114          
 115          /*********************************************************************************************************
             -********************************* 
 116          * 函数名称:  ReadTempEeprom
 117          * 功能说明:  读取EEPROM接口
 118          * 输    入: 无  
 119          * 输    出: 无
 120          **********************************************************************************************************
             -********************************/
 121          
 122          
 123          
 124          void EEpromInit(void)
 125          {
 126   1          if(ReadFromEEprom(0) == 0)
 127   1          {
 128   2              ReadFromEEprom(0);
 129   2          }
 130   1          if(gstAM901.stFilter->type< EEPROM_SIZE)
 131   1          {
 132   2              gstAM901.Run.Bit.EepromBlok = 0;
 133   2              EraseEEprom(0);
 134   2              return;
 135   2          }
 136   1          else
 137   1          {
 138   2              if(ReadFromEEprom(1) == 0)
 139   2              {
 140   3                  ReadFromEEprom(1);
 141   3              }
 142   2          }
 143   1          
 144   1          if(gstAM901.stFilter->type < EEPROM_SIZE)//5a 表示上一次用的是EEPROM_ADDR 块，标记成F5;这一次用EEPROM1_
             -ADDR
 145   1          {
 146   2              gstAM901.Run.Bit.EepromBlok = 1;//gstAM901.Run.Bit.EepromBlok = 1;
 147   2              EraseEEprom(1);//EraseEEprom(1);
 148   2          }
 149   1          else//首次使用
 150   1          {
 151   2                gstAM901.Run.Bit.EepromBlok = 0;
 152   2                EraseEEprom(1);
 153   2                memset((u8 *)gstAM901.stFilter,0,EEPROM_DATA_LEN);
 154   2                FirstPownOnFlag = 1;
 155   2          }
 156   1      }
 157          
 158          
 159          
 160          
 161          
 162          
 163          
 164          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    913    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     17    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.59.0.0   BSP_EEPROM                                                        04/08/2024 14:09:42 PAGE 4   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
