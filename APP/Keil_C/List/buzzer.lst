C51 COMPILER V9.59.0.0   BUZZER                                                            04/08/2024 14:09:42 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE BUZZER
OBJECT MODULE PLACED IN ..\Output\buzzer.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\Apps\buzzer.c LARGE OMF2 OPTIMIZE(0,SIZE) BROWSE INTVECTOR(0X1000) IN
                    -CDIR(..\FWLib\SC95F_Lib\inc;..\User;..\IOT_DRIVER\XIAOMI;..\Drivers;..\Drivers\TKDriver\C;..\List\..\Apps;..\Apps) DEFIN
                    -E(SC95F8x1xB) DEBUG PRINT(..\List\buzzer.lst) TABS(2) OBJECT(..\Output\buzzer.obj)

line level    source

   1          
   2          #include "buzzer.h"
   3          
   4          #define _100ms_Per5ms 20
   5          #define _30ms_Per5ms  2
   6          #define BUZZER_0N  1
   7          #define BUZZER_0FF 0
   8          
   9          
  10          
  11          #define BUZZER_POWER_ON      PWM_CmdEX(PWM0_Type,ENABLE)//PINS_DRV_WritePin(PTD,16,1)
  12          #define BUZZER_POWER_OFF     PWM_IndependentModeConfig(PWM02,0);;//PINS_DRV_WritePin(PTD,16,0)
  13          #define BUEEER_SetFrq(X)     PWM_Init(PWM0_PRESSEL_FHRC_D2,X)//((FTM0)->MOD) = ((((FTM0)->MOD) & ~(0xFFFFu)
             -) | (40000000/X));((FTM0)->SYNC) = ((((FTM0)->SYNC) & ~(0x80)) | (0x80))
  14          #define BUEEER_SetDuty(X)    PWM_IndependentModeConfig(PWM02,X*0.5);//(FTM0)->CONTROLS[0].CnV = 0xF55;        
             -            ((FTM0)->SYNC) = ((((FTM0)->SYNC) & ~(0x80)) | (0x80))
  15          #define BUZZER_Stop            PWM_CmdEX(PWM0_Type,DISABLE)//(FTM0)->CONTROLS[0].CnV = 0x0000;((FTM0)->SYNC
             -) = ((((FTM0)->SYNC) & ~(0x80)) | (0x80))
  16          //#define BUEEER_SetDuty_OFF()    ;//(FTM0)->CONTROLS[0].CnV = 0x2000;                    ((FTM0)->SYNC) = ((((FTM0)
             -->SYNC) & ~(0x80)) | (0x80))
  17          
  18          typedef union
  19          {
  20            uint8_t all;
  21            struct
  22            {
  23              uint8_t run         :1;
  24              uint8_t cnt     :7;
  25            }Bit;
  26          }ST_Heat;
  27          
  28          typedef struct
  29          {
  30              uint32_t frq;
  31              uint16_t OpenTime;
  32              uint16_t CloseTime;
  33          }ST_Buzzer;
  34          
  35          typedef struct
  36          {
  37              uint16_t OpenTime;
  38              uint16_t CloseTime;
  39              uint8_t   step;
  40          }ST_BuzzerCanShu;
  41          
  42          #define Buzzer0N_SingalKey 3300
  43          #define Buzzer0N_6sheng 3700
  44          #define Buzzer0N_3sheng 3400
  45          
  46          #define Buzzer0FF_TIME_Per1s  620
  47          #define Buzzer0n_TIME_Per1s    380
  48          
  49          #define Buzzer0FF_TIME_Per500Ms  380
C51 COMPILER V9.59.0.0   BUZZER                                                            04/08/2024 14:09:42 PAGE 2   

  50          #define Buzzer0n_TIME_Per500Ms    120
  51          
  52          #define Buzzer0FF_TIME  880
  53          #define Buzzer0n_TIME   120
  54          
  55          code ST_Buzzer stBuzzerTab[] =
  56          {
  57              {1900    ,200,120},
  58              {2400    ,200,120},
  59              {2900    ,200,120},
  60              {3400    ,200,1200},
  61              {0xffffff   ,0xffff,0xffff}               
  62          };
  63          
  64          
  65          code ST_Buzzer stBuzzerTab1[] =
  66          {
  67              {3400    ,200,120},
  68              {2900    ,200,120},
  69              {2400    ,200,120},
  70              {1900    ,200,1200},
  71              {0xffffff   ,0xffff,0xffff}
  72          };
  73          ////tong suo
  74          code ST_Buzzer stBuzzerTab2[] =
  75          {
  76              {0xffffff   ,0xffff,0xffff}
  77          };
  78          
  79          code ST_Buzzer stBuzzerTab31[] =
  80          {
  81            #if 0
                  {1900    ,200,120},
                  {2400    ,200,120},
                  {2900    ,200,120},
                  {1900    ,200,120},
                  {2400    ,200,120},
                  {2900    ,200,120},
                  {1900    ,200,120},
                  {2400    ,200,120},
                  {2900    ,200,1200},
                #else
  92              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
  93              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
  94              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
  95              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
  96              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
  97              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
  98            #endif
  99              {0xffffff   ,0xffff,0xffff}
 100          };
 101          ///////////////////ZhiLeng
 102          ST_Buzzer stBuzzerTab32[] =
 103          {
 104              {Buzzer0N_SingalKey    ,200,Buzzer0FF_TIME},//2.0K
 105              {0xffffff   ,0xffff,0xffff}
 106          };
 107          ///////////////////JianAnJian
 108          ST_Buzzer stBuzzerTab33[] =
 109          {
 110            //  {2700    ,400,0},
 111           //   {2900    ,400,0},
C51 COMPILER V9.59.0.0   BUZZER                                                            04/08/2024 14:09:42 PAGE 3   

 112                {3150    ,200,300},
 113           //   {3300    ,400,0},
 114            //  {3500    ,400,0},
 115              {0xffffff   ,0xffff,0xffff}
 116          };
 117          
 118          ///////////////////JiaAnJian
 119          ST_Buzzer stBuzzerTab34[] =
 120          {
 121              {Buzzer0N_3sheng        ,Buzzer0FF_TIME_Per1s,Buzzer0FF_TIME_Per1s},//2.0K
 122              {Buzzer0N_3sheng        ,Buzzer0FF_TIME_Per1s,Buzzer0FF_TIME_Per1s},
 123              {Buzzer0N_3sheng        ,Buzzer0FF_TIME_Per1s,Buzzer0FF_TIME_Per1s},
 124              {0xffffff   ,0xffff,0xffff}
 125          };
 126          
 127          ///////////////////jiaRe
 128          ST_Buzzer stBuzzerTab35[] =
 129          {
 130              {2300    ,2000,1000},//1760 6 la
 131              {0xffffff   ,0xffff,0xffff}
 132          };
 133          
 134          ///////////////////chouTi 
 135          ST_Buzzer stBuzzerTab36[] =
 136          {
 137              {1700    ,Buzzer0n_TIME,100},//1760 6 la
 138              {2300    ,Buzzer0n_TIME,100},//1560 5 suo
 139              {0xffffff   ,0xffff,0xffff}
 140          };
 141          
 142          
 143          
 144          uint8_t  BuzzerStart(ST_Buzzer  *stBuzzerTab, uint16_t  *stimeOpenPower,uint16_t  *stimeClosePower,uint8_t
             - * step)
 145          {
 146   1      
 147   1          static uint16_t HisFrq =  0UL;
 148   1          static uint16_t sDuty = 0U;
 149   1        
 150   1          if(*step == 0xff)
 151   1          {
 152   2              return 1;
 153   2          }
 154   1          
 155   1          if(*stimeOpenPower < stBuzzerTab[*step].OpenTime * 0.2)
 156   1          {
 157   2              
 158   2              if(stBuzzerTab[*step].frq != HisFrq)
 159   2              {
 160   3                  HisFrq = stBuzzerTab[*step].frq ;
 161   3                  BUEEER_SetFrq(stBuzzerTab[*step].frq);
 162   3                  sDuty = stBuzzerTab[*step].frq;
 163   3                  BUZZER_POWER_ON; 
 164   3              }
 165   2              else
 166   2              {           
 167   3                  BUEEER_SetDuty(sDuty);
 168   3              }
 169   2              
 170   2               
 171   2              (*stimeOpenPower)++;
 172   2      
C51 COMPILER V9.59.0.0   BUZZER                                                            04/08/2024 14:09:42 PAGE 4   

 173   2          }
 174   1          else if(*stimeClosePower < stBuzzerTab[*step].CloseTime * 0.2)
 175   1          {
 176   2              BUZZER_POWER_OFF;
 177   2              
 178   2              (*stimeClosePower)++;
 179   2          }
 180   1          else
 181   1          {
 182   2              (*step)++;
 183   2              *stimeOpenPower = 0;
 184   2              *stimeClosePower = 0;
 185   2              sDuty = stBuzzerTab[*step].frq;
 186   2            
 187   2              if(stBuzzerTab[*step].frq == 0xfffffful)
 188   2              {
 189   3                  *step = 0xff;
 190   3                  HisFrq = 0;
 191   3                  BUZZER_Stop;
 192   3                  return 1;
 193   3              }        
 194   2          }
 195   1          return 0;
 196   1      
 197   1      }
 198          
 199          void BuzzerProcess(void)
 200          {
 201   1          static ST_Heat sBuzzerDelay;
 202   1          static uint8_t  voliceNum;
 203   1          static uint16_t  sstimeOpenPower;
 204   1          static uint16_t  sstimeClosePower;
 205   1          static uint8_t   sstep;
 206   1       
 207   1          if( BuzzerFlag || gbFlagData[5].all > 0)
 208   1          {
 209   2      
 210   2              sBuzzerDelay.Bit.run = 1;
 211   2          
 212   2              
 213   2              if(BuzzerFlag)
 214   2              {
 215   3                  voliceNum = 3;
 216   3              }
 217   2              
 218   2              else if(Buzzer1Flag)
 219   2              {
 220   3                  voliceNum = 31;
 221   3              }
 222   2              else if(Buzzer2Flag)
 223   2              {
 224   3                  voliceNum = 32;
 225   3              }
 226   2              else if(Buzzer3Flag)
 227   2              {
 228   3                  voliceNum = 33;
 229   3              }
 230   2              else if(Buzzer4Flag)
 231   2              {
 232   3                  voliceNum = 34;
 233   3              }
 234   2              else if(Buzzer5Flag)
C51 COMPILER V9.59.0.0   BUZZER                                                            04/08/2024 14:09:42 PAGE 5   

 235   2              {
 236   3                  voliceNum = 35;
 237   3              }
 238   2              else if(Buzzer6Flag)
 239   2              {
 240   3                  voliceNum = 36;
 241   3              }
 242   2              BuzzerFlag = 0;
 243   2              gbFlagData[5].all = 0;
 244   2              
 245   2              sstep = 0;
 246   2              sstimeOpenPower = 0;
 247   2              sstimeClosePower = 0;
 248   2          }
 249   1          if(sBuzzerDelay.Bit.run)
 250   1          {
 251   2              if(voliceNum == 1)
 252   2              {
 253   3                  if(BuzzerStart(stBuzzerTab,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 254   3                  {
 255   4                      sBuzzerDelay.Bit.run = 0;
 256   4                  }
 257   3              }
 258   2              else if(voliceNum == 2)
 259   2              {
 260   3                  if(BuzzerStart(stBuzzerTab1,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 261   3                  {
 262   4                      sBuzzerDelay.Bit.run = 0;
 263   4                  }
 264   3              }
 265   2              
 266   2              else if(voliceNum == 3)
 267   2              {
 268   3                  if(BuzzerStart(stBuzzerTab2,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 269   3                  {
 270   4                      sBuzzerDelay.Bit.run = 0;
 271   4                  }
 272   3              }
 273   2              
 274   2              else if(voliceNum == 31)
 275   2              {
 276   3                  if(BuzzerStart(stBuzzerTab31,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 277   3                  {
 278   4                      sBuzzerDelay.Bit.run = 0;
 279   4                  }
 280   3              }
 281   2              else if(voliceNum == 32)
 282   2              {
 283   3                  if(BuzzerStart(stBuzzerTab32,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 284   3                  {
 285   4                      sBuzzerDelay.Bit.run = 0;
 286   4                  }
 287   3              }
 288   2              else if(voliceNum == 33)
 289   2              {
 290   3                  if(BuzzerStart(stBuzzerTab33,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 291   3                  {
 292   4                      sBuzzerDelay.Bit.run = 0;
 293   4                  }
 294   3              }
 295   2              
 296   2              else if(voliceNum == 34)
C51 COMPILER V9.59.0.0   BUZZER                                                            04/08/2024 14:09:42 PAGE 6   

 297   2              {
 298   3                  if(BuzzerStart(stBuzzerTab34,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 299   3                  {
 300   4                      sBuzzerDelay.Bit.run = 0;
 301   4                  }
 302   3              }
 303   2              
 304   2              else if(voliceNum == 35)
 305   2              {
 306   3                  if(BuzzerStart(stBuzzerTab35,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 307   3                  {
 308   4                      sBuzzerDelay.Bit.run = 0;
 309   4                  }
 310   3              }
 311   2              
 312   2              else if(voliceNum == 36)
 313   2              {
 314   3                  if(BuzzerStart(stBuzzerTab36,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 315   3                  {
 316   4                      sBuzzerDelay.Bit.run = 0;
 317   4                  }
 318   3              }
 319   2          }
 320   1          else
 321   1          {
 322   2                  BUZZER_Stop;
 323   2          }
 324   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1786    ----
   CONSTANT SIZE    =    144    ----
   XDATA SIZE       =    127    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
