C51 COMPILER V9.59.0.0   BUZZER                                                            03/26/2024 16:08:16 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE BUZZER
OBJECT MODULE PLACED IN ..\Output\buzzer.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\Apps\buzzer.c LARGE OMF2 OPTIMIZE(0,SIZE) BROWSE INTVECTOR(0X1000) IN
                    -CDIR(..\FWLib\SC95F_Lib\inc;..\User;..\IOT_DRIVER\XIAOMI;..\Drivers;..\Drivers\TKDriver\C;..\List\..\Apps;..\Apps) DEFIN
                    -E(SC95F8x1xB) DEBUG PRINT(..\List\buzzer.lst) TABS(2) OBJECT(..\Output\buzzer.obj)

line level    source

   1          
   2          #include "buzzer.h"
   3          
   4          #define _100ms_Per5ms 20
   5          #define _30ms_Per5ms  2
   6          #define BUZZER_0N  1
   7          #define BUZZER_0FF 0
   8          
   9          
  10          
  11          #define BUZZER_POWER_ON      PWM_CmdEX(PWM0_Type,ENABLE)//PINS_DRV_WritePin(PTD,16,1)
  12          #define BUZZER_POWER_OFF     PWM_IndependentModeConfig(PWM02,0);;//PINS_DRV_WritePin(PTD,16,0)
  13          #define BUEEER_SetFrq(X)     PWM_Init(PWM0_PRESSEL_FHRC_D2,X)//((FTM0)->MOD) = ((((FTM0)->MOD) & ~(0xFFFFu)
             -) | (40000000/X));((FTM0)->SYNC) = ((((FTM0)->SYNC) & ~(0x80)) | (0x80))
  14          #define BUEEER_SetDuty(X)    PWM_IndependentModeConfig(PWM02,X*0.5);//(FTM0)->CONTROLS[0].CnV = 0xF55;        
             -            ((FTM0)->SYNC) = ((((FTM0)->SYNC) & ~(0x80)) | (0x80))
  15          #define BUZZER_Stop            PWM_CmdEX(PWM0_Type,DISABLE)//(FTM0)->CONTROLS[0].CnV = 0x0000;((FTM0)->SYNC
             -) = ((((FTM0)->SYNC) & ~(0x80)) | (0x80))
  16          //#define BUEEER_SetDuty_OFF()    ;//(FTM0)->CONTROLS[0].CnV = 0x2000;                    ((FTM0)->SYNC) = ((((FTM0)
             -->SYNC) & ~(0x80)) | (0x80))
  17          
  18          typedef union
  19          {
  20            uint8_t all;
  21            struct
  22            {
  23              uint8_t run         :1;
  24              uint8_t cnt     :7;
  25            }Bit;
  26          }ST_Heat;
  27          
  28          typedef struct
  29          {
  30              uint32_t frq;
  31              uint16_t OpenTime;
  32              uint16_t CloseTime;
  33          }ST_Buzzer;
  34          
  35          typedef struct
  36          {
  37              uint16_t OpenTime;
  38              uint16_t CloseTime;
  39              uint8_t   step;
  40          }ST_BuzzerCanShu;
  41          
  42          #define Buzzer0N_SingalKey 3300
  43          #define Buzzer0N_6sheng 3700
  44          #define Buzzer0N_3sheng 3400
  45          
  46          #define Buzzer0FF_TIME_Per1s  620
  47          #define Buzzer0n_TIME_Per1s    380
  48          
  49          #define Buzzer0FF_TIME_Per500Ms  380
C51 COMPILER V9.59.0.0   BUZZER                                                            03/26/2024 16:08:16 PAGE 2   

  50          #define Buzzer0n_TIME_Per500Ms    120
  51          
  52          #define Buzzer0FF_TIME  880
  53          #define Buzzer0n_TIME   120
  54          
  55          ST_Buzzer stBuzzerTab[] =
  56          {
  57              {1900    ,200,120},
  58              {2400    ,200,120},
  59              {2900    ,200,120},
  60              {3400    ,200,1200},
  61              {0xffffff   ,0xffff,0xffff}               
  62          };
  63          
  64          
  65          ST_Buzzer stBuzzerTab1[] =
  66          {
  67              {3400    ,200,120},
  68              {2900    ,200,120},
  69              {2400    ,200,120},
  70              {1900    ,200,1200},
  71              {0xffffff   ,0xffff,0xffff}
  72          };
  73          ////tong suo
  74          ST_Buzzer stBuzzerTab2[] =
  75          {
  76              {3999    ,Buzzer0n_TIME,Buzzer0FF_TIME},
  77              {3999    ,Buzzer0n_TIME,Buzzer0FF_TIME},
  78              {3999    ,Buzzer0n_TIME,Buzzer0FF_TIME},
  79              {3999    ,Buzzer0n_TIME,Buzzer0FF_TIME},
  80              {3999    ,Buzzer0n_TIME,Buzzer0FF_TIME},
  81              {3999    ,Buzzer0n_TIME,Buzzer0FF_TIME},
  82              {0xffffff   ,0xffff,0xffff}
  83          };
  84          
  85          ST_Buzzer stBuzzerTab31[] =
  86          {
  87            #if 0
                  {1900    ,200,120},
                  {2400    ,200,120},
                  {2900    ,200,120},
                  {1900    ,200,120},
                  {2400    ,200,120},
                  {2900    ,200,120},
                  {1900    ,200,120},
                  {2400    ,200,120},
                  {2900    ,200,1200},
                #else
  98              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
  99              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
 100              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
 101              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
 102              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
 103              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
 104            #endif
 105              {0xffffff   ,0xffff,0xffff}
 106          };
 107          ///////////////////ZhiLeng
 108          ST_Buzzer stBuzzerTab32[] =
 109          {
 110              {Buzzer0N_SingalKey    ,200,Buzzer0FF_TIME},//2.0K
 111              {0xffffff   ,0xffff,0xffff}
C51 COMPILER V9.59.0.0   BUZZER                                                            03/26/2024 16:08:16 PAGE 3   

 112          };
 113          ///////////////////JianAnJian
 114          ST_Buzzer stBuzzerTab33[] =
 115          {
 116            //  {2700    ,400,0},
 117           //   {2900    ,400,0},
 118                {3150    ,200,300},
 119           //   {3300    ,400,0},
 120            //  {3500    ,400,0},
 121              {0xffffff   ,0xffff,0xffff}
 122          };
 123          
 124          ///////////////////JiaAnJian
 125          ST_Buzzer stBuzzerTab34[] =
 126          {
 127              {Buzzer0N_3sheng        ,Buzzer0FF_TIME_Per1s,Buzzer0FF_TIME_Per1s},//2.0K
 128              {Buzzer0N_3sheng        ,Buzzer0FF_TIME_Per1s,Buzzer0FF_TIME_Per1s},
 129              {Buzzer0N_3sheng        ,Buzzer0FF_TIME_Per1s,Buzzer0FF_TIME_Per1s},
 130              {0xffffff   ,0xffff,0xffff}
 131          };
 132          
 133          ///////////////////jiaRe
 134          ST_Buzzer stBuzzerTab35[] =
 135          {
 136              {2300    ,2000,1000},//1760 6 la
 137              {0xffffff   ,0xffff,0xffff}
 138          };
 139          
 140          ///////////////////chouTi 
 141          ST_Buzzer stBuzzerTab36[] =
 142          {
 143              {1700    ,Buzzer0n_TIME,100},//1760 6 la
 144              {2300    ,Buzzer0n_TIME,100},//1560 5 suo
 145              {0xffffff   ,0xffff,0xffff}
 146          };
 147          
 148          
 149          
 150          uint8_t  BuzzerStart(ST_Buzzer  *stBuzzerTab, uint16_t  *stimeOpenPower,uint16_t  *stimeClosePower,uint8_t
             - * step)
 151          {
 152   1      
 153   1          static uint16_t HisFrq =  0UL;
 154   1          static uint16_t sDuty = 0U;
 155   1        
 156   1         if(*step == 0xff)
 157   1          {
 158   2              return 1;
 159   2          }
 160   1          
 161   1          if(*stimeOpenPower < stBuzzerTab[*step].OpenTime * 0.2)
 162   1          {
 163   2              
 164   2              if(stBuzzerTab[*step].frq != HisFrq)
 165   2              {
 166   3                  HisFrq = stBuzzerTab[*step].frq ;
 167   3                  BUEEER_SetFrq(stBuzzerTab[*step].frq);
 168   3                  sDuty = stBuzzerTab[*step].frq;
 169   3                  BUZZER_POWER_ON; 
 170   3              }
 171   2              else
 172   2              {           
C51 COMPILER V9.59.0.0   BUZZER                                                            03/26/2024 16:08:16 PAGE 4   

 173   3                  BUEEER_SetDuty(sDuty);
 174   3              }
 175   2              
 176   2               
 177   2              (*stimeOpenPower)++;
 178   2      
 179   2          }
 180   1          else if(*stimeClosePower < stBuzzerTab[*step].CloseTime * 0.2)
 181   1          {
 182   2              BUZZER_POWER_OFF;
 183   2              
 184   2              (*stimeClosePower)++;
 185   2          }
 186   1          else
 187   1          {
 188   2              (*step)++;
 189   2              *stimeOpenPower = 0;
 190   2              *stimeClosePower = 0;
 191   2              sDuty = stBuzzerTab[*step].frq;
 192   2            
 193   2              if(stBuzzerTab[*step].frq == 0xfffffful)
 194   2              {
 195   3                  *step = 0xff;
 196   3                  HisFrq = 0;
 197   3                  BUZZER_Stop;
 198   3                  return 1;
 199   3              }        
 200   2          }
 201   1          return 0;
 202   1      
 203   1      }
 204          
 205          void BuzzerProcess(void)
 206          {
 207   1          static ST_Heat sBuzzerDelay;
 208   1          static uint8_t  voliceNum;
 209   1          static uint16_t  sstimeOpenPower;
 210   1          static uint16_t  sstimeClosePower;
 211   1          static uint8_t   sstep;
 212   1       
 213   1          if( BuzzerFlag || gbFlagData[5].all > 0)
 214   1          {
 215   2      
 216   2              sBuzzerDelay.Bit.run = 1;
 217   2          
 218   2              
 219   2              if(BuzzerPowerOnFlag)
 220   2              {
 221   3                  voliceNum = 1;
 222   3              }
 223   2                  
 224   2              else if(BuzzerPowerOffFlag)
 225   2              {
 226   3                  voliceNum = 2;
 227   3              }
 228   2                  
 229   2              else if(BuzzerFlag)
 230   2              {
 231   3                  voliceNum = 3;
 232   3              }
 233   2              
 234   2              else if(Buzzer1Flag)
C51 COMPILER V9.59.0.0   BUZZER                                                            03/26/2024 16:08:16 PAGE 5   

 235   2              {
 236   3                  voliceNum = 31;
 237   3              }
 238   2              else if(Buzzer2Flag)
 239   2              {
 240   3                  voliceNum = 32;
 241   3              }
 242   2              else if(Buzzer3Flag)
 243   2              {
 244   3                  voliceNum = 33;
 245   3              }
 246   2              else if(Buzzer4Flag)
 247   2              {
 248   3                  voliceNum = 34;
 249   3              }
 250   2              else if(Buzzer5Flag)
 251   2              {
 252   3                  voliceNum = 35;
 253   3              }
 254   2              else if(Buzzer6Flag)
 255   2              {
 256   3                  voliceNum = 36;
 257   3              }
 258   2              BuzzerFlag = 0;
 259   2              gbFlagData[5].all = 0;
 260   2              
 261   2              sstep = 0;
 262   2              sstimeOpenPower = 0;
 263   2              sstimeClosePower = 0;
 264   2          }
 265   1          if(sBuzzerDelay.Bit.run)
 266   1          {
 267   2              if(voliceNum == 1)
 268   2              {
 269   3                  if(BuzzerStart(stBuzzerTab,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 270   3                  {
 271   4                      sBuzzerDelay.Bit.run = 0;
 272   4                  }
 273   3              }
 274   2              else if(voliceNum == 2)
 275   2              {
 276   3                  if(BuzzerStart(stBuzzerTab1,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 277   3                  {
 278   4                      sBuzzerDelay.Bit.run = 0;
 279   4                  }
 280   3              }
 281   2              
 282   2              else if(voliceNum == 3)
 283   2              {
 284   3                  if(BuzzerStart(stBuzzerTab2,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 285   3                  {
 286   4                      sBuzzerDelay.Bit.run = 0;
 287   4                  }
 288   3              }
 289   2              
 290   2              else if(voliceNum == 31)
 291   2              {
 292   3                  if(BuzzerStart(stBuzzerTab31,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 293   3                  {
 294   4                      sBuzzerDelay.Bit.run = 0;
 295   4                  }
 296   3              }
C51 COMPILER V9.59.0.0   BUZZER                                                            03/26/2024 16:08:16 PAGE 6   

 297   2              else if(voliceNum == 32)
 298   2              {
 299   3                  if(BuzzerStart(stBuzzerTab32,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 300   3                  {
 301   4                      sBuzzerDelay.Bit.run = 0;
 302   4                  }
 303   3              }
 304   2              else if(voliceNum == 33)
 305   2              {
 306   3                  if(BuzzerStart(stBuzzerTab33,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 307   3                  {
 308   4                      sBuzzerDelay.Bit.run = 0;
 309   4                  }
 310   3              }
 311   2              
 312   2              else if(voliceNum == 34)
 313   2              {
 314   3                  if(BuzzerStart(stBuzzerTab34,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 315   3                  {
 316   4                      sBuzzerDelay.Bit.run = 0;
 317   4                  }
 318   3              }
 319   2              
 320   2              else if(voliceNum == 35)
 321   2              {
 322   3                  if(BuzzerStart(stBuzzerTab35,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 323   3                  {
 324   4                      sBuzzerDelay.Bit.run = 0;
 325   4                  }
 326   3              }
 327   2              
 328   2              else if(voliceNum == 36)
 329   2              {
 330   3                  if(BuzzerStart(stBuzzerTab36,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 331   3                  {
 332   4                      sBuzzerDelay.Bit.run = 0;
 333   4                  }
 334   3              }
 335   2          }
 336   1          else
 337   1          {
 338   2                  BUZZER_Stop;
 339   2          }
 340   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1821    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    319    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
