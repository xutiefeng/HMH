C51 COMPILER V9.59.0.0   BUZZER                                                            03/25/2024 20:30:54 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE BUZZER
OBJECT MODULE PLACED IN ..\Output\buzzer.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\Apps\buzzer.c LARGE OMF2 OPTIMIZE(0,SIZE) BROWSE INTVECTOR(0X2800) IN
                    -CDIR(..\FWLib\SC95F_Lib\inc;..\User;..\IOT_DRIVER\XIAOMI;..\Drivers;..\Drivers\TKDriver\C;..\List\..\Apps;..\Apps) DEFIN
                    -E(SC95F8x1xB) DEBUG PRINT(..\List\buzzer.lst) TABS(2) OBJECT(..\Output\buzzer.obj)

line level    source

   1          
   2          #include "buzzer.h"
   3          
   4          #define _100ms_Per5ms 20
   5          #define _30ms_Per5ms  2
   6          #define BUZZER_0N  1
   7          #define BUZZER_0FF 0
   8          
   9          
  10          
  11          #define BUZZER_POWER_ON      PWM_CmdEX(PWM0_Type,ENABLE)//PINS_DRV_WritePin(PTD,16,1)
  12          #define BUZZER_POWER_OFF     PWM_IndependentModeConfig(PWM02,0);;//PINS_DRV_WritePin(PTD,16,0)
  13          #define BUEEER_SetFrq(X)     PWM_Init(PWM0_PRESSEL_FHRC_D2,X)//((FTM0)->MOD) = ((((FTM0)->MOD) & ~(0xFFFFu)
             -) | (40000000/X));((FTM0)->SYNC) = ((((FTM0)->SYNC) & ~(0x80)) | (0x80))
  14          #define BUEEER_SetDuty(X)    PWM_IndependentModeConfig(PWM02,X*0.5);//(FTM0)->CONTROLS[0].CnV = 0xF55;        
             -            ((FTM0)->SYNC) = ((((FTM0)->SYNC) & ~(0x80)) | (0x80))
  15          #define BUZZER_Stop            PWM_CmdEX(PWM0_Type,DISABLE)//(FTM0)->CONTROLS[0].CnV = 0x0000;((FTM0)->SYNC
             -) = ((((FTM0)->SYNC) & ~(0x80)) | (0x80))
  16          //#define BUEEER_SetDuty_OFF()    ;//(FTM0)->CONTROLS[0].CnV = 0x2000;                    ((FTM0)->SYNC) = ((((FTM0)
             -->SYNC) & ~(0x80)) | (0x80))
  17          
  18          typedef union
  19          {
  20            uint8_t all;
  21            struct
  22            {
  23              uint8_t run         :1;
  24              uint8_t cnt     :7;
  25            }Bit;
  26          }ST_Heat;
  27          
  28          typedef struct
  29          {
  30              uint32_t frq;
  31              uint16_t OpenTime;
  32              uint16_t CloseTime;
  33          }ST_Buzzer;
  34          
  35          typedef struct
  36          {
  37              uint16_t OpenTime;
  38              uint16_t CloseTime;
  39              uint8_t   step;
  40          }ST_BuzzerCanShu;
  41          
  42          #define Buzzer0N_SingalKey 3300
  43          #define Buzzer0N_6sheng 3700
  44          #define Buzzer0N_3sheng 3400
  45          
  46          #define Buzzer0FF_TIME_Per1s  620
  47          #define Buzzer0n_TIME_Per1s    380
  48          
  49          #define Buzzer0FF_TIME_Per500Ms  380
C51 COMPILER V9.59.0.0   BUZZER                                                            03/25/2024 20:30:54 PAGE 2   

  50          #define Buzzer0n_TIME_Per500Ms    120
  51          
  52          #define Buzzer0FF_TIME  880
  53          #define Buzzer0n_TIME   120
  54          
  55          ST_Buzzer stBuzzerTab[] =
  56          {
  57              {1900    ,200,120},
  58              {2400    ,200,120},
  59              {2900    ,200,120},
  60              {3400    ,200,1200},
  61              {0xffffff   ,0xffff,0xffff}               
  62          };
  63          
  64          
  65          ST_Buzzer stBuzzerTab1[] =
  66          {
  67              {3400    ,200,120},
  68              {2900    ,200,120},
  69              {2400    ,200,120},
  70              {1900    ,200,1200},
  71              {0xffffff   ,0xffff,0xffff}
  72          };
  73          ////tong suo
  74          ST_Buzzer stBuzzerTab2[] =
  75          {
  76              {3999    ,Buzzer0n_TIME,Buzzer0FF_TIME},
  77              {3999    ,Buzzer0n_TIME,Buzzer0FF_TIME},
  78              {3999    ,Buzzer0n_TIME,Buzzer0FF_TIME},
  79              {3999    ,Buzzer0n_TIME,Buzzer0FF_TIME},
  80              {3999    ,Buzzer0n_TIME,Buzzer0FF_TIME},
  81              {3999    ,Buzzer0n_TIME,Buzzer0FF_TIME},
  82              {0xffffff   ,0xffff,0xffff}
  83          };
  84          
  85          ST_Buzzer stBuzzerTab31[] =
  86          {
  87            #if 0
                  {1900    ,200,120},
                  {2400    ,200,120},
                  {2900    ,200,120},
                  {1900    ,200,120},
                  {2400    ,200,120},
                  {2900    ,200,120},
                  {1900    ,200,120},
                  {2400    ,200,120},
                  {2900    ,200,1200},
                #else
  98              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
  99              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
 100              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
 101              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
 102              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
 103              {Buzzer0N_6sheng    ,Buzzer0FF_TIME_Per500Ms,Buzzer0n_TIME_Per500Ms},
 104            #endif
 105              {0xffffff   ,0xffff,0xffff}
 106          };
 107          ///////////////////ZhiLeng
 108          ST_Buzzer stBuzzerTab32[] =
 109          {
 110              {Buzzer0N_SingalKey    ,200,Buzzer0FF_TIME},//2.0K
 111              {0xffffff   ,0xffff,0xffff}
C51 COMPILER V9.59.0.0   BUZZER                                                            03/25/2024 20:30:54 PAGE 3   

 112          };
 113          ///////////////////JianAnJian
 114          ST_Buzzer stBuzzerTab33[] =
 115          {
 116            //  {2700    ,400,0},
 117           //   {2900    ,400,0},
 118                {3150    ,200,300},
 119           //   {3300    ,400,0},
 120            //  {3500    ,400,0},
 121              {0xffffff   ,0xffff,0xffff}
 122          };
 123          
 124          ///////////////////JiaAnJian
 125          ST_Buzzer stBuzzerTab34[] =
 126          {
 127              {Buzzer0N_3sheng        ,Buzzer0FF_TIME_Per1s,Buzzer0FF_TIME_Per1s},//2.0K
 128              {Buzzer0N_3sheng        ,Buzzer0FF_TIME_Per1s,Buzzer0FF_TIME_Per1s},
 129              {Buzzer0N_3sheng        ,Buzzer0FF_TIME_Per1s,Buzzer0FF_TIME_Per1s},
 130              {0xffffff   ,0xffff,0xffff}
 131          };
 132          
 133          ///////////////////jiaRe
 134          ST_Buzzer stBuzzerTab35[] =
 135          {
 136              {2300    ,Buzzer0n_TIME,Buzzer0FF_TIME},//1760 6 la
 137              {1700    ,Buzzer0n_TIME,Buzzer0FF_TIME},//1560 5 suo
 138              {0xffffff   ,0xffff,0xffff}
 139          };
 140          
 141          ///////////////////chouTi 
 142          ST_Buzzer stBuzzerTab36[] =
 143          {
 144              {1700    ,Buzzer0n_TIME,100},//1760 6 la
 145              {2300    ,Buzzer0n_TIME,100},//1560 5 suo
 146              {0xffffff   ,0xffff,0xffff}
 147          };
 148          
 149          
 150          
 151          uint8_t  BuzzerStart(ST_Buzzer  *stBuzzerTab, uint16_t  *stimeOpenPower,uint16_t  *stimeClosePower,uint8_t
             - * step)
 152          {
 153   1      
 154   1          static uint16_t HisFrq =  0UL;
 155   1          static uint16_t HisDuty = 0UL;
 156   1          static uint16_t sDuty = 0U;
 157   1        
 158   1         if(*step == 0xff)
 159   1          {
 160   2              return 1;
 161   2          }
 162   1          
 163   1          if(*stimeOpenPower < stBuzzerTab[*step].OpenTime * 0.2)
 164   1          {
 165   2              
 166   2              if(stBuzzerTab[*step].frq != HisFrq)
 167   2              {
 168   3                  HisFrq = stBuzzerTab[*step].frq ;
 169   3                  BUEEER_SetFrq(stBuzzerTab[*step].frq);
 170   3                  sDuty = stBuzzerTab[*step].frq;
 171   3                  BUZZER_POWER_ON; 
 172   3              }
C51 COMPILER V9.59.0.0   BUZZER                                                            03/25/2024 20:30:54 PAGE 4   

 173   2              else
 174   2              {           
 175   3                  BUEEER_SetDuty(sDuty);
 176   3              }
 177   2              
 178   2               
 179   2              (*stimeOpenPower)++;
 180   2      
 181   2          }
 182   1          else if(*stimeClosePower < stBuzzerTab[*step].CloseTime * 0.2)
 183   1          {
 184   2              BUZZER_POWER_OFF;
 185   2              
 186   2              (*stimeClosePower)++;
 187   2          }
 188   1          else
 189   1          {
 190   2              (*step)++;
 191   2              *stimeOpenPower = 0;
 192   2              *stimeClosePower = 0;
 193   2              sDuty = stBuzzerTab[*step].frq;
 194   2            
 195   2              if(stBuzzerTab[*step].frq == 0xfffffful)
 196   2              {
 197   3                  *step = 0xff;
 198   3                  HisFrq = 0;
 199   3                  BUZZER_Stop;
 200   3                  return 1;
 201   3              }        
 202   2          }
 203   1          return 0;
 204   1      
 205   1      }
*** WARNING C280 IN LINE 155 OF ..\Apps\buzzer.c: 'HisDuty': unreferenced local variable
 206          
 207          void BuzzerProcess(void)
 208          {
 209   1          static ST_Heat sBuzzerDelay;
 210   1          static uint8_t  voliceNum;
 211   1          static uint16_t  sstimeOpenPower;
 212   1          static uint16_t  sstimeClosePower;
 213   1          static uint8_t   sstep;
 214   1       
 215   1          if( BuzzerFlag || gbFlagData[5].all > 0)
 216   1          {
 217   2      
 218   2              sBuzzerDelay.Bit.run = 1;
 219   2          
 220   2              
 221   2              if(BuzzerPowerOnFlag)
 222   2              {
 223   3                  voliceNum = 1;
 224   3              }
 225   2                  
 226   2              else if(BuzzerPowerOffFlag)
 227   2              {
 228   3                  voliceNum = 2;
 229   3              }
 230   2                  
 231   2              else if(BuzzerFlag)
 232   2              {
 233   3                  voliceNum = 3;
C51 COMPILER V9.59.0.0   BUZZER                                                            03/25/2024 20:30:54 PAGE 5   

 234   3              }
 235   2              
 236   2              else if(Buzzer1Flag)
 237   2              {
 238   3                  voliceNum = 31;
 239   3              }
 240   2              else if(Buzzer2Flag)
 241   2              {
 242   3                  voliceNum = 32;
 243   3              }
 244   2              else if(Buzzer3Flag)
 245   2              {
 246   3                  voliceNum = 33;
 247   3              }
 248   2              else if(Buzzer4Flag)
 249   2              {
 250   3                  voliceNum = 34;
 251   3              }
 252   2              else if(Buzzer5Flag)
 253   2              {
 254   3                  voliceNum = 35;
 255   3              }
 256   2              else if(Buzzer6Flag)
 257   2              {
 258   3                  voliceNum = 36;
 259   3              }
 260   2              BuzzerFlag = 0;
 261   2              gbFlagData[5].all = 0;
 262   2              
 263   2              sstep = 0;
 264   2              sstimeOpenPower = 0;
 265   2              sstimeClosePower = 0;
 266   2          }
 267   1          if(sBuzzerDelay.Bit.run)
 268   1          {
 269   2              if(voliceNum == 1)
 270   2              {
 271   3                  if(BuzzerStart(stBuzzerTab,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 272   3                  {
 273   4                      sBuzzerDelay.Bit.run = 0;
 274   4                  }
 275   3              }
 276   2              else if(voliceNum == 2)
 277   2              {
 278   3                  if(BuzzerStart(stBuzzerTab1,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 279   3                  {
 280   4                      sBuzzerDelay.Bit.run = 0;
 281   4                  }
 282   3              }
 283   2              
 284   2              else if(voliceNum == 3)
 285   2              {
 286   3                  if(BuzzerStart(stBuzzerTab2,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 287   3                  {
 288   4                      sBuzzerDelay.Bit.run = 0;
 289   4                  }
 290   3              }
 291   2              
 292   2              else if(voliceNum == 31)
 293   2              {
 294   3                  if(BuzzerStart(stBuzzerTab31,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 295   3                  {
C51 COMPILER V9.59.0.0   BUZZER                                                            03/25/2024 20:30:54 PAGE 6   

 296   4                      sBuzzerDelay.Bit.run = 0;
 297   4                  }
 298   3              }
 299   2              else if(voliceNum == 32)
 300   2              {
 301   3                  if(BuzzerStart(stBuzzerTab32,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 302   3                  {
 303   4                      sBuzzerDelay.Bit.run = 0;
 304   4                  }
 305   3              }
 306   2              else if(voliceNum == 33)
 307   2              {
 308   3                  if(BuzzerStart(stBuzzerTab33,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 309   3                  {
 310   4                      sBuzzerDelay.Bit.run = 0;
 311   4                  }
 312   3              }
 313   2              
 314   2              else if(voliceNum == 34)
 315   2              {
 316   3                  if(BuzzerStart(stBuzzerTab34,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 317   3                  {
 318   4                      sBuzzerDelay.Bit.run = 0;
 319   4                  }
 320   3              }
 321   2              
 322   2              else if(voliceNum == 35)
 323   2              {
 324   3                  if(BuzzerStart(stBuzzerTab35,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 325   3                  {
 326   4                      sBuzzerDelay.Bit.run = 0;
 327   4                  }
 328   3              }
 329   2              
 330   2              else if(voliceNum == 36)
 331   2              {
 332   3                  if(BuzzerStart(stBuzzerTab36,&sstimeOpenPower,&sstimeClosePower,&sstep)==1)
 333   3                  {
 334   4                      sBuzzerDelay.Bit.run = 0;
 335   4                  }
 336   3              }
 337   2          }
 338   1          else
 339   1          {
 340   2                  BUZZER_Stop;
 341   2          }
 342   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1821    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    329    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.59.0.0   BUZZER                                                            03/25/2024 20:30:54 PAGE 7   


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
