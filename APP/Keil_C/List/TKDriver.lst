C51 COMPILER V9.59.0.0   TKDRIVER                                                          03/22/2024 16:29:18 PAGE 1   
C51 COMPILER V9.59.0.0, COMPILATION OF MODULE TKDRIVER
OBJECT MODULE PLACED IN D:\tfxu\Project\AM901_0308\APP\Keil_C\Project\..\Output\TKDriver.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\bin\C51.exe ..\Drivers\TKDriver\C\TKDriver.C OMF2 INTVECTOR(0X2800) DEFINE(SC95F8x1x
                    -B) LARGE INCDIR(D:\tfxu\Project\AM901_0308\APP\Keil_C\Project\..\FWLib\SC95F_Lib\inc;D:\tfxu\Project\AM901_0308\APP\Keil
                    -_C\Project\..\User;D:\tfxu\Project\AM901_0308\APP\Keil_C\Project\..\IOT_DRIVER\XIAOMI;D:\tfxu\Project\AM901_0308\APP\Kei
                    -l_C\Project\..\Drivers;D:\tfxu\Project\AM901_0308\APP\Keil_C\Project\..\Drivers\TKDriver\C;D:\tfxu\Project\AM901_0308\AP
                    -P\Keil_C\Project\..\List\..\Apps;D:\tfxu\Project\AM901_0308\APP\Keil_C\Project\..\Apps) BROWSE DEBUG OBJECTEXTEND OPTIMI
                    -ZE(8,SIZE) CODE NOCOND SYMBOLS LISTINCLUDE PRINT(D:\tfxu\Project\AM901_0308\APP\Keil_C\Project\..\List\TKDriver.lst) OBJ
                    -ECT(D:\tfxu\Project\AM901_0308\APP\Keil_C\Project\..\Output\TKDriver.obj)
line level    source
   1          
   2          
   3          
   4          
   5          
   6          
   7          
   8          
   9          
  10          
  11          #include "S_TouchKeyCFG.h"
   1      =1  
   2      =1  
   3      =1  
   4      =1  
   5      =1  
   6      =1  
   7      =1  
   8      =1  
   9      =1  #ifndef __S_TOUCHKEYCFG_H__
  10      =1  #define __S_TOUCHKEYCFG_H__
  11      =1  #define             SOCAPI_SET_TOUCHKEY_TOTAL                                     2
  12      =1  #define                 SOCAPI_SET_TOUCHKEY_CHANNEL                                       0x00004002
  13      =1  #define                 SOCAPI_SET_TOUCHKEY_CHANNEL2                          0x00000000
  14      =1  unsigned int  code TKCFG[17] = {0,1,0,3,10,3000,200,100,2,0,0,5,0,1,65535,65535,24}; 
  15      =1  unsigned char code TKChannelCfg[2][8]={
  16      =1  0x03,0x48,0x05,0x08,0x1f,0x05,0x01,0x44,
  17      =1  0x03,0x48,0x05,0x08,0x1a,0x05,0x01,0x91,
  18      =1  };
  19      =1  #endif
  12          #include "TKDriver.h"
   1      =1  
   2      =1  
   3      =1  
   4      =1  
   5      =1  
   6      =1  
   7      =1  
   8      =1  
   9      =1  
  10      =1  #ifndef _TKDriver_H
  11      =1  #define _TKDriver_H
  12      =1  
  13      =1  
  14      =1  
  15      =1  #define SCD_TK_Type 1
  16      =1  #define SCD_Wheel 0
  17      =1  #define SCD_Slider 0
  18      =1  #define SCD_Key 1
  19      =1  extern unsigned char xdata SOCAPI_TouchKeyStatus;
  20      =1  
  21      =1  extern unsigned long int TouchKeyScan();
  22      =1  extern void TouchKeyInit();
  23      =1  extern void TouchKeyRestart();
  24      =1  
  25      =1  
  26      =1  
  27      =1  extern  unsigned        char    xdata   SOCAPI_TouchKeyStatus;                  
  28      =1  extern  unsigned        char    xdata   ConfirmTouchCnt;                                                                                                                
  29      =1  extern  unsigned        int             xdata   RawData[];                                                      
  30      =1  extern  unsigned        int             xdata   BaseLine[];     
  31      =1  extern  unsigned        int             xdata   FilterData[];   
  32      =1  extern  unsigned        int     xdata   CurrentSensorKey;                                               
  33      =1  extern  unsigned        char    xdata   RestAreaCnt[];                                   
  34      =1  extern  unsigned        char    xdata   TouchCnt[];
  35      =1  extern  unsigned        char    xdata   NoTouchCnt[];                                                     
  36      =1  extern  unsigned        char    xdata   CurrentChannel[];
  37      =1  extern  unsigned    char    xdata   LowFingerDataCnt[];                          
  38      =1  extern                          int     xdata   DifferAccum[];
  39      =1  extern  unsigned        char    xdata   FloatAreaCnt[]; 
  40      =1  extern                          char    xdata   SetNoiseThreshold;
  41      =1  extern  unsigned        char    xdata   MultipleDealTpye;       
  42      =1  extern  unsigned        char    xdata   ICHG_RawData_Ratio;
  43      =1  
  44      =1                                  
  45      =1  
  46      =1  #endif 
  13          #include "stdio.h"
   1      =1  
   8      =1  
   9      =1  #ifndef __STDIO_H__
  10      =1  #define __STDIO_H__
  11      =1  
  12      =1  #ifndef EOF
  13      =1   #define EOF -1
  14      =1  #endif
  15      =1  
  16      =1  #ifndef NULL
  17      =1   #define NULL ((void *) 0)
  18      =1  #endif
  19      =1  
  20      =1  #ifndef _SIZE_T
  21      =1   #define _SIZE_T
  22      =1   typedef unsigned int size_t;
  23      =1  #endif
  24      =1  
  25      =1  #pragma SAVE
  26      =1  #pragma REGPARMS
  27      =1  extern char _getkey (void);
  28      =1  extern char getchar (void);
  29      =1  extern char ungetchar (char);
  30      =1  extern char putchar (char);
  31      =1  extern int printf   (const char *, ...);
  32      =1  extern int sprintf  (char *, const char *, ...);
  33      =1  extern int vprintf  (const char *, char *);
  34      =1  extern int vsprintf (char *, const char *, char *);
  35      =1  extern char *gets (char *, int n);
  36      =1  extern int scanf (const char *, ...);
  37      =1  extern int sscanf (char *, const char *, ...);
  38      =1  extern int puts (const char *);
  39      =1  
  40      =1  #pragma RESTORE
  41      =1  
  42      =1  #endif
  43      =1  
  14          
  15          
  16          
  17          
  18          sfr     TK_PSW      =   0xD0;   
  19          sbit    TK_CY           =       TK_PSW^7;       
  20          
  21          
  22          
  23          unsigned        char    xdata           SOCAPI_TouchKeyStatus;                                  
  24                                                                                                                                                      
  25          
  26          
  27          unsigned        int     xdata           RawData [SOCAPI_SET_TOUCHKEY_TOTAL];                    
  28          unsigned        int             xdata           BaseLine[SOCAPI_SET_TOUCHKEY_TOTAL];
  29          unsigned    int         xdata           FilterData[SOCAPI_SET_TOUCHKEY_TOTAL];
  30                                                                                                          
  31          unsigned        char    xdata           RestAreaCnt[SOCAPI_SET_TOUCHKEY_TOTAL];                         
  32          unsigned        char    xdata           TouchCnt[SOCAPI_SET_TOUCHKEY_TOTAL];                            
  33          unsigned        char    xdata           NoTouchCnt[SOCAPI_SET_TOUCHKEY_TOTAL];  
  34                                  
  35          unsigned        char    xdata           CurrentChannel[SOCAPI_SET_TOUCHKEY_TOTAL];      
  36                                                       
  37          unsigned    char    xdata           LowFingerDataCnt[SOCAPI_SET_TOUCHKEY_TOTAL];
  38          
  39          unsigned        char    xdata           FloatAreaCnt[SOCAPI_SET_TOUCHKEY_TOTAL]; 
  40          
  41          unsigned        char    xdata           BaseLineAdjusttmp[SOCAPI_SET_TOUCHKEY_TOTAL];   
  42          
  43          int                 xdata           DifferAccum[SOCAPI_SET_TOUCHKEY_TOTAL]; 
  44          char                xdata               SetNoiseThreshold;
  45          
  46          unsigned        char    xdata           ConfirmTouchCnt;
  47          unsigned        char    xdata           MultipleDealTpye = 0; 
  48          
  49          
  50          unsigned        int     xdata       UpdateBaseLNum;                                             
  51          unsigned        int     xdata       MultipleLNum;                                               
  52          
  53          
  54          extern  unsigned        char    data            CurrentChannelMax;              
  55          extern  bit  bMultiple; 
  56          extern  bit  GetIsNeedUpdateBaseline(void);
  57          extern  void SetNeedUpdateBaseline(void);
  58          extern  unsigned long int SensorKeyFlag(void);
  59          extern  void MultipleDeal(unsigned char CycleCnt);
  60          extern  void TouchKey_Service(void);
  61          
  62          
  63          #define         SOCAPI_SET_CS_FUNCTION                                          1               
  64          #define         SOCAPI_INHIBITION_ZONE                                      8           
             -参数,对讲机设置小
  65          #define         SOCAPI_MAX_KEY_MUTIPLE                                          300             
  66          #define         SOCAPI_MAX_KEY_NUM_INVALID                                      3               
  67          
  68          
  69          #define         AppType                                         0
  70          #define         IsDoubleKey                                             1                         
  71          #define         AirSeparationDistance               2                    
  72          #define         CONFIRMTOUCHCNT                 3                        
  73          #define         INIT_AUTO_UPDATE_TIME               4
  74          #define         SET_KEY_CONTI_TIME              5                        
  75          #define         SET_SYNC_UPDATE                                 6
  76          #define         SET_UPDATE_SPEED                                7       
  77          #define         AUTO_UPDATE_TIME                    8
  78          #define         FilteredKValue                                  9
  79          #define         SET_ANTIJAM                                     10
  80          #define         BAUD                                    11
  81          #define         DwellTime                                       12
  82          #define         SaveTime                                            13
  83          #define         NOISE                           16
  84          
  85          #define         SET_TOUCH_FREQ                                  0
  86          #define         SET_RESOLUTION                                  1
  87          #define         SET_GAIN_CFG                                    2
  88          #define         SCANTIME                                                3
  89          #define         SET_ICHA                                                4
  90          #define         FINGER_THRESHOLD_H                          6
  91          #define         FINGER_THRESHOLD_L                          7
  92          
  93          
  94          
  95          
  96          
  97          
 105          unsigned int SetOneKeyPushResetTime(void)   
 106          {         
 107   1              return  TKCFG[SET_KEY_CONTI_TIME];
 108   1      }
 109          
 116          int  GetBaselineUpdateThreshold(void)
 117          {
 118   1              return TKCFG[SET_UPDATE_SPEED]; 
 119   1      }
 120          
 121          
 128          unsigned char GetInitAutoUpdateTime(void)
 129          {
 130   1              return  TKCFG[INIT_AUTO_UPDATE_TIME];
 131   1      }
 132          
 139          char GetCsFunction(void)
 140          {
 141   1              return SOCAPI_SET_CS_FUNCTION; 
 142   1      }
 143          
 150          unsigned int   GetCurrFingerValue(unsigned char i)
 151          { 
 152   1              return  TKChannelCfg[i][FINGER_THRESHOLD_H]*256+TKChannelCfg[i][FINGER_THRESHOLD_L] ;
 153   1      }
 154          
 155          
 162          unsigned char  GetScanTimeValue(unsigned char i)
 163          { 
 164   1              return TKChannelCfg[i][SCANTIME];         
 165   1      }
 166          
 173          unsigned char IsDoubleKeyOrSlideKey(void)
 174          {
 175   1          return TKCFG[IsDoubleKey];
 176   1      }
 177          
 185          unsigned char  GetBaseLineAdjustValue(unsigned char i)
 186          {       
 187   1           return BaseLineAdjusttmp[i]; 
 188   1      }
 189          
 196          unsigned char GetUpConfirmCnt(void)
 197          {
 198   1              return ConfirmTouchCnt>>1;
 199   1      }
 200          
 207          
 208          unsigned char GetTKYzCnt(void)
 209          {
 210   1              return (ConfirmTouchCnt/3);
 211   1      }
 212          
 213          
 220          int GetTKYzThreshold(unsigned char i)
 221          {       
 222   1              unsigned int SetFingerThresholdtmp; 
 223   1              
 224   1              SetFingerThresholdtmp = GetCurrFingerValue(i); 
 225   1          SetFingerThresholdtmp = SetFingerThresholdtmp*SOCAPI_INHIBITION_ZONE/10;
 226   1      
 227   1              return SetFingerThresholdtmp;
 228   1      }
 229          
 236          void CurrentSensorChoose(void)
 237          {
 238   1              unsigned char  data     i = 0;
 239   1              unsigned char  data     Ctk_Channel_mark = 0;
 240   1      
 241   1         
 242   1              unsigned long int  data  CurrentSensorKey ;              
 243   1              
 244   1              CurrentSensorKey = SOCAPI_SET_TOUCHKEY_CHANNEL; 
 245   1                      
 246   1              for(i=0;i<31;i++)
 247   1              {
 248   2                      CurrentSensorKey=CurrentSensorKey>>1;
 249   2                      if(TK_CY)
 250   2                      {
 251   3                              CurrentChannel[Ctk_Channel_mark] = i;                                           
 252   3                              Ctk_Channel_mark++;
 253   3                              if(Ctk_Channel_mark >= SOCAPI_SET_TOUCHKEY_TOTAL)
 254   3                                      break;
 255   3                      }               
 256   2              }
 257   1              CurrentChannelMax = Ctk_Channel_mark;                                                   
 258   1      }
 259          
 260          
 267          unsigned char  GetCfgMsg(unsigned char i)
 268          {
 269   1              switch(i)
 270   1              { 
 271   2                       case 0:  return TKChannelCfg[0][SET_TOUCH_FREQ];         
 272   2                       case 1:  return TKChannelCfg[0][SET_RESOLUTION];         
 273   2                       case 2:  return TKChannelCfg[0][SET_GAIN_CFG];           
 274   2                       case 3:  return GetBaseLineAdjustValue(0);
 275   2                       case 4:  return TKCFG[SET_ANTIJAM];                      
 276   2                       default:return 0;              
 277   2              }
 278   1      }
 279          
 280          
 287          void TouchKeyCFGInit(void)
 288          {
 289   1              unsigned char  data     i;
 290   1              ConfirmTouchCnt = TKCFG[CONFIRMTOUCHCNT];
 291   1              SetNoiseThreshold = TKCFG[NOISE];
 292   1              CurrentSensorChoose(); 
 293   1               for(i=0;i<CurrentChannelMax;i++)
 294   1              {
 295   2                BaseLineAdjusttmp[i] =TKChannelCfg[i][SET_ICHA];;     
 296   2              } 
 297   1              UpdateBaseLNum = 0; 
 298   1      }
 299          
 300          
 310          unsigned long int TouchKeyScan(void)
 311          {
 312   1              unsigned char data t;
 313   1          unsigned char data MultipleCnt = 0;
 314   1              unsigned long int data Keyvalue ; 
 315   1              unsigned long int data KeyData = 0;     
 316   1              
 317   1              if(GetIsNeedUpdateBaseline() == 0)                              
 318   1              {
 319   2                      Keyvalue = SensorKeyFlag();                                     
             -的16通道bit 位                                                                           
 320   2                      for(t=0;t<CurrentChannelMax;t++)
 321   2                      {
 322   3                              Keyvalue = Keyvalue>>1;
 323   3                              if(TK_CY)
 324   3                              {
 325   4                                      KeyData |= ((unsigned long int)0x01 << (CurrentChannel[t]));              
 326   4                                      MultipleCnt++;                                                  
 327   4                              }
 328   3                      }                
 329   2                      if(MultipleCnt >= 2)                                                                            
 330   2                      {                       
 331   3                              bMultiple = 1;                  
 332   3                              if(MultipleCnt >= SOCAPI_MAX_KEY_NUM_INVALID)
 333   3                              {
 334   4                                      SetNeedUpdateBaseline();                                                        
 335   4                              }
 336   3                              else
 337   3                              {                                       
 338   4                                      if(IsDoubleKeyOrSlideKey())
 339   4                                      {
 340   5                                              bMultiple = 0;
 341   5                                      }                                
 342   4                              }                       
 343   3                      }                       
 344   2      
 345   2                      if(bMultiple == 0)                                                      
 346   2                      {               
 347   3                              if(KeyData != 0x0)                                          
 348   3                              {                       
 349   4                                      UpdateBaseLNum++; 
 350   4                              }
 351   3                              else    
 352   3                              {
 353   4                                      UpdateBaseLNum = 0;     
 354   4                              } 
 355   3                      }       
 356   2                      else
 357   2                      {   
 358   3                          
 359   3                              MultipleLNum++; 
 360   3                              KeyData = 0x00;
 361   3                      }
 362   2      
 363   2                      if(UpdateBaseLNum > SetOneKeyPushResetTime())     
 364   2                      {
 365   3                              SetNeedUpdateBaseline(); 
 366   3                              UpdateBaseLNum = 0;
 367   3                      }
 368   2                                      
 369   2                      if(MultipleLNum >SOCAPI_MAX_KEY_MUTIPLE)                  
 370   2                      {
 371   3                              SetNeedUpdateBaseline(); 
 372   3                              MultipleDealTpye = 1; 
 373   3                              MultipleLNum = 0;
 374   3                      }  
 375   2              }                       
 376   1              else
 377   1              {
 378   2                      MultipleDeal(TKCFG[AUTO_UPDATE_TIME]);                                                                          
 379   2              }  
 380   1              
 381   1              return KeyData;
 382   1      }
 383          
 384          
 391          void CTK_ISR(void) interrupt    11
 392          {
 393   1         TouchKey_Service();
 394   1      }
 395          
 396          
 397          
ASSEMBLY LISTING OF GENERATED OBJECT CODE
             ; FUNCTION SetOneKeyPushResetTime (BEGIN)
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
                                           ; SOURCE LINE # 107
0000 900000      R     MOV     DPTR,#TKCFG+0AH
0003 E4                CLR     A
0004 93                MOVC    A,@A+DPTR
0005 FE                MOV     R6,A
0006 7401              MOV     A,#01H
0008 93                MOVC    A,@A+DPTR
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 108
000A 22                RET     
             ; FUNCTION SetOneKeyPushResetTime (END)
             ; FUNCTION GetBaselineUpdateThreshold (BEGIN)
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
0000 900000      R     MOV     DPTR,#TKCFG+0EH
0003 E4                CLR     A
0004 93                MOVC    A,@A+DPTR
0005 FE                MOV     R6,A
0006 7401              MOV     A,#01H
0008 93                MOVC    A,@A+DPTR
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 119
000A 22                RET     
             ; FUNCTION GetBaselineUpdateThreshold (END)
             ; FUNCTION GetInitAutoUpdateTime (BEGIN)
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
0000 900000      R     MOV     DPTR,#TKCFG+08H
0003 7401              MOV     A,#01H
0005 93                MOVC    A,@A+DPTR
0006 FF                MOV     R7,A
                                           ; SOURCE LINE # 131
0007 22                RET     
             ; FUNCTION GetInitAutoUpdateTime (END)
             ; FUNCTION GetCsFunction (BEGIN)
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
0000 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 142
0002 22                RET     
             ; FUNCTION GetCsFunction (END)
             ; FUNCTION _GetCurrFingerValue (BEGIN)
                                           ; SOURCE LINE # 150
;---- Variable 'i' assigned to Register 'R5' ----
0000 AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 152
0002 ED                MOV     A,R5
0003 75F008            MOV     B,#08H
0006 A4                MUL     AB
0007 2400        R     ADD     A,#LOW TKChannelCfg+06H
0009 F582              MOV     DPL,A
000B E4                CLR     A
000C 3400        R     ADDC    A,#HIGH TKChannelCfg+06H
000E F583              MOV     DPH,A
0010 E4                CLR     A
0011 93                MOVC    A,@A+DPTR
0012 FE                MOV     R6,A
0013 ED                MOV     A,R5
0014 75F008            MOV     B,#08H
0017 A4                MUL     AB
0018 2400        R     ADD     A,#LOW TKChannelCfg+07H
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH TKChannelCfg+07H
001F F583              MOV     DPH,A
0021 E4                CLR     A
0022 93                MOVC    A,@A+DPTR
0023 7C00              MOV     R4,#00H
0025 2400              ADD     A,#00H
0027 FF                MOV     R7,A
0028 EC                MOV     A,R4
0029 3E                ADDC    A,R6
002A FE                MOV     R6,A
                                           ; SOURCE LINE # 153
002B 22                RET     
             ; FUNCTION _GetCurrFingerValue (END)
             ; FUNCTION _GetScanTimeValue (BEGIN)
                                           ; SOURCE LINE # 162
;---- Variable 'i' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
0000 EF                MOV     A,R7
0001 75F008            MOV     B,#08H
0004 A4                MUL     AB
0005 2400        R     ADD     A,#LOW TKChannelCfg+03H
0007 F582              MOV     DPL,A
0009 E4                CLR     A
000A 3400        R     ADDC    A,#HIGH TKChannelCfg+03H
000C F583              MOV     DPH,A
000E E4                CLR     A
000F 93                MOVC    A,@A+DPTR
0010 FF                MOV     R7,A
                                           ; SOURCE LINE # 165
0011 22                RET     
             ; FUNCTION _GetScanTimeValue (END)
             ; FUNCTION IsDoubleKeyOrSlideKey (BEGIN)
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 175
0000 900000      R     MOV     DPTR,#TKCFG+02H
0003 7401              MOV     A,#01H
0005 93                MOVC    A,@A+DPTR
0006 FF                MOV     R7,A
                                           ; SOURCE LINE # 176
0007 22                RET     
             ; FUNCTION IsDoubleKeyOrSlideKey (END)
             ; FUNCTION _GetBaseLineAdjustValue (BEGIN)
                                           ; SOURCE LINE # 185
;---- Variable 'i' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
0000 7400        R     MOV     A,#LOW BaseLineAdjusttmp
0002 2F                ADD     A,R7
0003 F582              MOV     DPL,A
0005 E4                CLR     A
0006 3400        R     ADDC    A,#HIGH BaseLineAdjusttmp
0008 F583              MOV     DPH,A
000A E0                MOVX    A,@DPTR
000B FF                MOV     R7,A
                                           ; SOURCE LINE # 188
000C 22                RET     
             ; FUNCTION _GetBaseLineAdjustValue (END)
             ; FUNCTION GetUpConfirmCnt (BEGIN)
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
0000 900000      R     MOV     DPTR,#ConfirmTouchCnt
0003 E0                MOVX    A,@DPTR
0004 C3                CLR     C
0005 13                RRC     A
0006 FF                MOV     R7,A
                                           ; SOURCE LINE # 199
0007 22                RET     
             ; FUNCTION GetUpConfirmCnt (END)
             ; FUNCTION GetTKYzCnt (BEGIN)
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
0000 900000      R     MOV     DPTR,#ConfirmTouchCnt
0003 E0                MOVX    A,@DPTR
0004 75F003            MOV     B,#03H
0007 84                DIV     AB
0008 FF                MOV     R7,A
                                           ; SOURCE LINE # 211
0009 22                RET     
             ; FUNCTION GetTKYzCnt (END)
             ; FUNCTION _GetTKYzThreshold (BEGIN)
                                           ; SOURCE LINE # 220
;---- Variable 'i' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 224
0000 120000      R     LCALL   _GetCurrFingerValue
;---- Variable 'SetFingerThresholdtmp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 225
0003 EF                MOV     A,R7
0004 7803              MOV     R0,#03H
0006         ?C0048:
0006 C3                CLR     C
0007 33                RLC     A
0008 CE                XCH     A,R6
0009 33                RLC     A
000A CE                XCH     A,R6
000B D8F9              DJNZ    R0,?C0048
000D FF                MOV     R7,A
000E 7C00              MOV     R4,#00H
0010 7D0A              MOV     R5,#0AH
0012 020000      E     LJMP    ?C?UIDIV
             ; FUNCTION _GetTKYzThreshold (END)
             ; FUNCTION CurrentSensorChoose (BEGIN)
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
0000 E4                CLR     A
0001 F500        R     MOV     i,A
                                           ; SOURCE LINE # 239
0003 F500        R     MOV     Ctk_Channel_mark,A
                                           ; SOURCE LINE # 244
0005 750002      R     MOV     CurrentSensorKey+03H,#02H
0008 750040      R     MOV     CurrentSensorKey+02H,#040H
000B F500        R     MOV     CurrentSensorKey+01H,A
000D F500        R     MOV     CurrentSensorKey,A
                                           ; SOURCE LINE # 246
000F F500        R     MOV     i,A
0011         ?C0012:
0011 C3                CLR     C
0012 E500        R     MOV     A,i
0014 941F              SUBB    A,#01FH
0016 7480              MOV     A,#080H
0018 9480              SUBB    A,#080H
001A 5037              JNC     ?C0013
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
001C AF00        R     MOV     R7,CurrentSensorKey+03H
001E AE00        R     MOV     R6,CurrentSensorKey+02H
0020 AD00        R     MOV     R5,CurrentSensorKey+01H
0022 AC00        R     MOV     R4,CurrentSensorKey
0024 7801              MOV     R0,#01H
0026 120000      E     LCALL   ?C?ULSHR
0029 8F00        R     MOV     CurrentSensorKey+03H,R7
002B 8E00        R     MOV     CurrentSensorKey+02H,R6
002D 8D00        R     MOV     CurrentSensorKey+01H,R5
002F 8C00        R     MOV     CurrentSensorKey,R4
                                           ; SOURCE LINE # 249
0031 30D71B            JNB     TK_CY,?C0014
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 251
0034 7400        R     MOV     A,#LOW CurrentChannel
0036 2500        R     ADD     A,Ctk_Channel_mark
0038 F582              MOV     DPL,A
003A E4                CLR     A
003B 3400        R     ADDC    A,#HIGH CurrentChannel
003D F583              MOV     DPH,A
003F E500        R     MOV     A,i
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 252
0042 0500        R     INC     Ctk_Channel_mark
                                           ; SOURCE LINE # 253
0044 C3                CLR     C
0045 E500        R     MOV     A,Ctk_Channel_mark
0047 9402              SUBB    A,#02H
0049 7480              MOV     A,#080H
004B 9480              SUBB    A,#080H
004D 5004              JNC     ?C0013
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
004F         ?C0014:
004F 0500        R     INC     i
0051 80BE              SJMP    ?C0012
0053         ?C0013:
                                           ; SOURCE LINE # 257
0053 850000      E     MOV     CurrentChannelMax,Ctk_Channel_mark
                                           ; SOURCE LINE # 258
0056 22                RET     
             ; FUNCTION CurrentSensorChoose (END)
             ; FUNCTION _GetCfgMsg (BEGIN)
                                           ; SOURCE LINE # 267
;---- Variable 'i' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
0000 EF                MOV     A,R7
0001 14                DEC     A
0002 6012              JZ      ?C0021
0004 14                DEC     A
0005 6014              JZ      ?C0022
0007 14                DEC     A
0008 6018              JZ      ?C0023
000A 14                DEC     A
000B 601A              JZ      ?C0024
000D 2404              ADD     A,#04H
000F 701E              JNZ     ?C0025
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 271
0011         ?C0019:
0011 900000      R     MOV     DPTR,#TKChannelCfg
0014 8008              SJMP    ?C0050
                                           ; SOURCE LINE # 272
0016         ?C0021:
0016 900000      R     MOV     DPTR,#TKChannelCfg+01H
0019         ?C0049:
0019 8003              SJMP    ?C0050
                                           ; SOURCE LINE # 273
001B         ?C0022:
001B 900000      R     MOV     DPTR,#TKChannelCfg+02H
001E         ?C0050:
001E E4                CLR     A
001F 93                MOVC    A,@A+DPTR
0020 FF                MOV     R7,A
0021 22                RET     
                                           ; SOURCE LINE # 274
0022         ?C0023:
0022 E4                CLR     A
0023 FF                MOV     R7,A
0024 020000      R     LJMP    _GetBaseLineAdjustValue
                                           ; SOURCE LINE # 275
0027         ?C0024:
0027 900000      R     MOV     DPTR,#TKCFG+014H
002A 7401              MOV     A,#01H
002C 93                MOVC    A,@A+DPTR
002D FF                MOV     R7,A
002E 22                RET     
                                           ; SOURCE LINE # 276
002F         ?C0025:
002F 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
0031         ?C0020:
0031 22                RET     
             ; FUNCTION _GetCfgMsg (END)
             ; FUNCTION TouchKeyCFGInit (BEGIN)
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 290
0000 900000      R     MOV     DPTR,#TKCFG+06H
0003 7401              MOV     A,#01H
0005 93                MOVC    A,@A+DPTR
0006 900000      R     MOV     DPTR,#ConfirmTouchCnt
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 291
000A 900000      R     MOV     DPTR,#TKCFG+020H
000D 7401              MOV     A,#01H
000F 93                MOVC    A,@A+DPTR
0010 900000      R     MOV     DPTR,#SetNoiseThreshold
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
0014 120000      R     LCALL   CurrentSensorChoose
                                           ; SOURCE LINE # 293
0017 E4                CLR     A
0018 F500        R     MOV     i,A
001A         ?C0026:
001A E500        R     MOV     A,i
001C C3                CLR     C
001D 9500        E     SUBB    A,CurrentChannelMax
001F 5023              JNC     ?C0027
                                           ; SOURCE LINE # 294
                                           ; SOURCE LINE # 295
0021 E500        R     MOV     A,i
0023 75F008            MOV     B,#08H
0026 A4                MUL     AB
0027 2400        R     ADD     A,#LOW TKChannelCfg+04H
0029 F582              MOV     DPL,A
002B E4                CLR     A
002C 3400        R     ADDC    A,#HIGH TKChannelCfg+04H
002E F583              MOV     DPH,A
0030 E4                CLR     A
0031 93                MOVC    A,@A+DPTR
0032 FF                MOV     R7,A
0033 7400        R     MOV     A,#LOW BaseLineAdjusttmp
0035 2500        R     ADD     A,i
0037 F582              MOV     DPL,A
0039 E4                CLR     A
003A 3400        R     ADDC    A,#HIGH BaseLineAdjusttmp
003C F583              MOV     DPH,A
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
0040 0500        R     INC     i
0042 80D6              SJMP    ?C0026
0044         ?C0027:
                                           ; SOURCE LINE # 297
0044 E4                CLR     A
0045 900000      R     MOV     DPTR,#UpdateBaseLNum
0048 F0                MOVX    @DPTR,A
0049 A3                INC     DPTR
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 298
004B 22                RET     
             ; FUNCTION TouchKeyCFGInit (END)
             ; FUNCTION TouchKeyScan (BEGIN)
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 313
0000 E4                CLR     A
0001 F500        R     MOV     MultipleCnt,A
                                           ; SOURCE LINE # 315
0003 F500        R     MOV     KeyData+03H,A
0005 F500        R     MOV     KeyData+02H,A
0007 F500        R     MOV     KeyData+01H,A
0009 F500        R     MOV     KeyData,A
                                           ; SOURCE LINE # 317
000B 120000      E     LCALL   GetIsNeedUpdateBaseline
000E 5003              JNC     $ + 5H
0010 020000      R     LJMP    ?C0030
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
0013 120000      E     LCALL   SensorKeyFlag
0016 8F00        R     MOV     Keyvalue+03H,R7
0018 8E00        R     MOV     Keyvalue+02H,R6
001A 8D00        R     MOV     Keyvalue+01H,R5
001C 8C00        R     MOV     Keyvalue,R4
                                           ; SOURCE LINE # 320
001E E4                CLR     A
001F F500        R     MOV     t,A
0021         ?C0031:
0021 E500        R     MOV     A,t
0023 C3                CLR     C
0024 9500        E     SUBB    A,CurrentChannelMax
0026 504C              JNC     ?C0032
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 322
0028 AF00        R     MOV     R7,Keyvalue+03H
002A AE00        R     MOV     R6,Keyvalue+02H
002C AD00        R     MOV     R5,Keyvalue+01H
002E AC00        R     MOV     R4,Keyvalue
0030 7801              MOV     R0,#01H
0032 120000      E     LCALL   ?C?ULSHR
0035 8F00        R     MOV     Keyvalue+03H,R7
0037 8E00        R     MOV     Keyvalue+02H,R6
0039 8D00        R     MOV     Keyvalue+01H,R5
003B 8C00        R     MOV     Keyvalue,R4
                                           ; SOURCE LINE # 323
003D 30D730            JNB     TK_CY,?C0033
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 325
0040 E4                CLR     A
0041 7F01              MOV     R7,#01H
0043 FE                MOV     R6,A
0044 FD                MOV     R5,A
0045 FC                MOV     R4,A
0046 7400        R     MOV     A,#LOW CurrentChannel
0048 2500        R     ADD     A,t
004A F582              MOV     DPL,A
004C E4                CLR     A
004D 3400        R     ADDC    A,#HIGH CurrentChannel
004F F583              MOV     DPH,A
0051 E0                MOVX    A,@DPTR
0052 F9                MOV     R1,A
0053 F8                MOV     R0,A
0054 120000      E     LCALL   ?C?LSHL
0057 E500        R     MOV     A,KeyData+03H
0059 4F                ORL     A,R7
005A FF                MOV     R7,A
005B E500        R     MOV     A,KeyData+02H
005D 4E                ORL     A,R6
005E FE                MOV     R6,A
005F E500        R     MOV     A,KeyData+01H
0061 4D                ORL     A,R5
0062 FD                MOV     R5,A
0063 E500        R     MOV     A,KeyData
0065 4C                ORL     A,R4
0066 8F00        R     MOV     KeyData+03H,R7
0068 8E00        R     MOV     KeyData+02H,R6
006A 8D00        R     MOV     KeyData+01H,R5
006C F500        R     MOV     KeyData,A
                                           ; SOURCE LINE # 326
006E 0500        R     INC     MultipleCnt
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
0070         ?C0033:
0070 0500        R     INC     t
0072 80AD              SJMP    ?C0031
0074         ?C0032:
                                           ; SOURCE LINE # 329
0074 AF00        R     MOV     R7,MultipleCnt
0076 7E00              MOV     R6,#00H
0078 C3                CLR     C
0079 EF                MOV     A,R7
007A 9402              SUBB    A,#02H
007C 7480              MOV     A,#080H
007E 9480              SUBB    A,#080H
0080 4018              JC      ?C0035
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 331
0082 D200        E     SETB    bMultiple
                                           ; SOURCE LINE # 332
0084 EF                MOV     A,R7
0085 9403              SUBB    A,#03H
0087 7480              MOV     A,#080H
0089 9480              SUBB    A,#080H
008B 4005              JC      ?C0036
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
008D 120000      E     LCALL   SetNeedUpdateBaseline
                                           ; SOURCE LINE # 335
0090 8008              SJMP    ?C0035
0092         ?C0036:
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 338
0092 120000      R     LCALL   IsDoubleKeyOrSlideKey
0095 EF                MOV     A,R7
0096 6002              JZ      ?C0035
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 340
0098 C200        E     CLR     bMultiple
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 343
009A         ?C0035:
                                           ; SOURCE LINE # 345
009A 200028            JB      bMultiple,?C0039
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
009D E4                CLR     A
009E FF                MOV     R7,A
009F FE                MOV     R6,A
00A0 FD                MOV     R5,A
00A1 FC                MOV     R4,A
00A2 AB00        R     MOV     R3,KeyData+03H
00A4 AA00        R     MOV     R2,KeyData+02H
00A6 A900        R     MOV     R1,KeyData+01H
00A8 A800        R     MOV     R0,KeyData
00AA C3                CLR     C
00AB 120000      E     LCALL   ?C?ULCMP
00AE 600C              JZ      ?C0040
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
00B0 900000      R     MOV     DPTR,#UpdateBaseLNum
00B3 E4                CLR     A
00B4 75F001            MOV     B,#01H
00B7 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 350
00BA 801C              SJMP    ?C0042
00BC         ?C0040:
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
00BC E4                CLR     A
00BD 900000      R     MOV     DPTR,#UpdateBaseLNum
00C0 F0                MOVX    @DPTR,A
00C1 A3                INC     DPTR
00C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 355
00C3 8013              SJMP    ?C0042
00C5         ?C0039:
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 359
00C5 900000      R     MOV     DPTR,#MultipleLNum
00C8 E4                CLR     A
00C9 75F001            MOV     B,#01H
00CC 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 360
00CF E4                CLR     A
00D0 F500        R     MOV     KeyData+03H,A
00D2 F500        R     MOV     KeyData+02H,A
00D4 F500        R     MOV     KeyData+01H,A
00D6 F500        R     MOV     KeyData,A
                                           ; SOURCE LINE # 361
00D8         ?C0042:
                                           ; SOURCE LINE # 363
00D8 120000      R     LCALL   SetOneKeyPushResetTime
00DB D3                SETB    C
00DC 900000      R     MOV     DPTR,#UpdateBaseLNum+01H
00DF E0                MOVX    A,@DPTR
00E0 9F                SUBB    A,R7
00E1 900000      R     MOV     DPTR,#UpdateBaseLNum
00E4 E0                MOVX    A,@DPTR
00E5 9E                SUBB    A,R6
00E6 400A              JC      ?C0043
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 365
00E8 120000      E     LCALL   SetNeedUpdateBaseline
                                           ; SOURCE LINE # 366
00EB E4                CLR     A
00EC 900000      R     MOV     DPTR,#UpdateBaseLNum
00EF F0                MOVX    @DPTR,A
00F0 A3                INC     DPTR
00F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 367
00F2         ?C0043:
                                           ; SOURCE LINE # 369
00F2 D3                SETB    C
00F3 900000      R     MOV     DPTR,#MultipleLNum+01H
00F6 E0                MOVX    A,@DPTR
00F7 942C              SUBB    A,#02CH
00F9 900000      R     MOV     DPTR,#MultipleLNum
00FC E0                MOVX    A,@DPTR
00FD 9401              SUBB    A,#01H
00FF 401D              JC      ?C0045
                                           ; SOURCE LINE # 370
                                           ; SOURCE LINE # 371
0101 120000      E     LCALL   SetNeedUpdateBaseline
                                           ; SOURCE LINE # 372
0104 900000      R     MOV     DPTR,#MultipleDealTpye
0107 7401              MOV     A,#01H
0109 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
010A E4                CLR     A
010B 900000      R     MOV     DPTR,#MultipleLNum
010E F0                MOVX    @DPTR,A
010F A3                INC     DPTR
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
                                           ; SOURCE LINE # 375
0111 800B              SJMP    ?C0045
0113         ?C0030:
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 378
0113 900000      R     MOV     DPTR,#TKCFG+010H
0116 E4                CLR     A
0117 7401              MOV     A,#01H
0119 93                MOVC    A,@A+DPTR
011A FF                MOV     R7,A
011B 120000      E     LCALL   _MultipleDeal
                                           ; SOURCE LINE # 379
011E         ?C0045:
                                           ; SOURCE LINE # 381
011E AF00        R     MOV     R7,KeyData+03H
0120 AE00        R     MOV     R6,KeyData+02H
0122 AD00        R     MOV     R5,KeyData+01H
0124 AC00        R     MOV     R4,KeyData
                                           ; SOURCE LINE # 382
0126 22                RET     
             ; FUNCTION TouchKeyScan (END)
             ; FUNCTION CTK_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C001              PUSH    AR1
0011 C002              PUSH    AR2
0013 C003              PUSH    AR3
0015 C004              PUSH    AR4
0017 C005              PUSH    AR5
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 393
001D 120000      E     LCALL   TouchKey_Service
                                           ; SOURCE LINE # 394
0020 D007              POP     AR7
0022 D006              POP     AR6
0024 D005              POP     AR5
0026 D004              POP     AR4
0028 D003              POP     AR3
002A D002              POP     AR2
002C D001              POP     AR1
002E D000              POP     AR0
0030 D0D0              POP     PSW
0032 D082              POP     DPL
0034 D083              POP     DPH
0036 D0F0              POP     B
0038 D0E0              POP     ACC
003A 32                RETI    
             ; FUNCTION CTK_ISR (END)
NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
ConfirmTouchCnt. . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0000H  1
BaseLine . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0001H  4
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
TouchKeyCFGInit. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
_GetBaseLineAdjustValue. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
TK_CY. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
FloatAreaCnt . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0005H  2
_GetCurrFingerValue. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
GetCsFunction. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SensorKeyFlag. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CurrentChannel . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0007H  2
RawData. . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0009H  4
IsDoubleKeyOrSlideKey. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TouchCnt . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    000DH  2
CTK_ISR. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
bMultiple. . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
LowFingerDataCnt . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    000FH  2
SetOneKeyPushResetTime . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TouchKeyScan . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  t. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  MultipleCnt. . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  Keyvalue . . . . . . . . . . . . . .  AUTO     DATA   U_LONG   0002H  4
  KeyData. . . . . . . . . . . . . . .  AUTO     DATA   U_LONG   0006H  4
_GetScanTimeValue. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
GetTKYzCnt . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SetNeedUpdateBaseline. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DifferAccum. . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0011H  4
RestAreaCnt. . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0015H  2
_GetTKYzThreshold. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  SetFingerThresholdtmp. . . . . . . .  * REG *  DATA   U_INT    0006H  2
_MultipleDeal. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
BaseLineAdjusttmp. . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0017H  2
CurrentSensorChoose. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  Ctk_Channel_mark . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  CurrentSensorKey . . . . . . . . . .  AUTO     DATA   U_LONG   0002H  4
GetInitAutoUpdateTime. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
CurrentChannelMax. . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
MultipleLNum . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    0019H  2
_GetCfgMsg . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
SOCAPI_TouchKeyStatus. . . . . . . . .  PUBLIC   XDATA  U_CHAR   001BH  1
GetUpConfirmCnt. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
UpdateBaseLNum . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    001CH  2
SetNoiseThreshold. . . . . . . . . . .  PUBLIC   XDATA  CHAR     001EH  1
GetBaselineUpdateThreshold . . . . . .  PUBLIC   CODE   PROC     0000H  -----
FilterData . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    001FH  4
TouchKey_Service . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
NoTouchCnt . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0023H  2
GetIsNeedUpdateBaseline. . . . . . . .  EXTERN   CODE   PROC     -----  -----
MultipleDealTpye . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0025H  1
TKChannelCfg . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0022H  16
NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
TKCFG. . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0000H  34
TK_PSW . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    725    ----
   CONSTANT SIZE    =     50    ----
   XDATA SIZE       =     38    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.
C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
